{
  
    
        "post0": {
            "title": "Colabで始めるPythonテキスト処理",
            "content": "&#21021;&#12417;&#12395; . システム開発・運用の現場ではテキストを処理して別のテキストを作る仕事が多くあります。 . このNotebookでは、ColabでPythonを実行することによってテキスト処理を行う際の基礎的な情報を提供します。 . なお、Pythonにおけるフロー制御(if文、for文など)やデータ構造(リスト型、辞書型など)は説明しません。それらの情報は、python.orgのPython チュートリアル — Python 3.10.4 ドキュメントを参照することを推奨します。(リンク先は3.10.4のものですが、使用するPythonのバージョンに対応したものを参照してください。)また、正規表現も扱いません。このNotebookでは正規表現を使用せずに実現できる簡単なテキスト処理を扱います。 . Colab(Google Colaboratory)&#12392;&#12399; . Colaboratory へようこそ - Colaboratory　を参照してください。 . Jupyter Notebook&#12392;&#12398;&#38306;&#20418; . Colabは、Colabがホストする Jupyter Notebook(.ipynb)の実行環境です。 Colabで作成したNotebookをJupyterで実行したり、Jupyterで作成したNotebookをColabで実行したりできます。 . Jupyterプロジェクトについては、Project Jupyter | Homeを参照してください。 . Colab&#12398;&#20351;&#12356;&#26041; . Overview of Colaboratory Features - Colaboratory を参照してください。 . &#22793;&#25968;&#12434;&#30906;&#35469;&#12377;&#12427;&#24190;&#12388;&#12363;&#12398;&#26041;&#27861; . Colabはインタラクティブな実行環境なので、コードセルを実行するたびにその結果を確認しながら進めるのが確実です。このセクションでは変数の中身を確認するいくつかの方法を説明します。 . &#22793;&#25968;&#12434;&#20516;&#35413;&#20385;&#12377;&#12427; . 変数を評価すると、文字列に変換してコードセルのアウトプットに書き出されます。 . s = &#39;foo&#39; s . &#39;foo&#39; . ただし、この方法では、最後に評価した結果のみ出力されます。 . s1 = &#39;foo&#39; s2 = &#39;bar&#39; s1 s2 . &#39;bar&#39; . また、改行コードを含む文字列では改行コードを文字として出力します。 . s = &quot;foo nbar&quot; s . &#39;foo nbar&#39; . Noneである場合は出力されません。 . s = None s . listを評価すると次のように出力されます。 . l = [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] l . [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] . print&#38306;&#25968;&#12434;&#20351;&#12358; . print関数を使っても、コードセルのアウトプットに書き出すことができます。 . s = &#39;foo&#39; print(s) . foo . この方法では、print関数を実行するたびにアウトプットに書き出されます。 . s1 = &#39;foo&#39; s2 = &#39;bar&#39; print(s1) print(s2) . foo bar . また、改行コードを含む文字列では改行コードを改行として出力します。 . s = &quot;foo nbar&quot; print(s) . foo bar . また、Noneである場合はNoneという文字列として出力されます。 . s = None print(s) . None . listを書き出す場合、ただprint関数に与えると次のようになります。 . l = [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] print(l) . [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] . str.joinを利用すると次のように、１要素を１行として書き出すことができます。 . l = [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] print(&#39; n&#39;.join(l)) . abs() aiter() all() any() anext() ascii() . pandas.Dataframe&#12434;&#20351;&#12358; . listのインデックスも表示したいのであれば、enumerate関数を利用するのが典型的な方法ですが、 . for i, x in enumerate([&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;]): print(i,x) . 0 abs() 1 aiter() 2 all() 3 any() 4 anext() 5 ascii() . pandas.DataFrameを使って書き出すと簡単です。 . import pandas pandas.DataFrame([&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;]) . 0 . 0 abs() | . 1 aiter() | . 2 all() | . 3 any() | . 4 anext() | . 5 ascii() | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; listの要素に改行コードを含む場合、print関数を使用すると次にようになってしまいますが、 . for i, x in enumerate([&#39;ab ns()&#39;, &#39;ai nter()&#39;]): print(i,x) . 0 ab s() 1 ai ter() . pandas.DataFrameであれば改行コードを文字列として書き出します。 . import pandas pandas.DataFrame([&#39;ab ns()&#39;, &#39;ai nter()&#39;]) . 0 . 0 ab ns() | . 1 ai nter() | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; pandas.DataFrameは次のように、dictionaryを要素とするlistを表として書き出すことができます。 . import pandas pandas.DataFrame( [ {&#39;col1&#39;: &#39;row1-1&#39;, &#39;col2&#39;: &#39;row1-2&#39;}, {&#39;col1&#39;: &#39;row2-1&#39;, &#39;col2&#39;: &#39;row2-2&#39;}, ] ) . col1 col2 . 0 row1-1 | row1-2 | . 1 row2-1 | row2-2 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; &#12486;&#12461;&#12473;&#12488;&#12434;&#35501;&#12415;&#36796;&#12416;&#12356;&#12367;&#12388;&#12363;&#12398;&#26041;&#27861; . Colabでテキストを処理するためには、処理するテキストを読み込まなければなりません。このセクションでは、そのいくつかの方法について説明します。 . &#12486;&#12461;&#12473;&#12488;&#12434;&#12467;&#12540;&#12489;&#12395;&#22475;&#12417;&#36796;&#12416; . 通常のプログラムであれば、処理するテキストをコードに埋め込むのはナンセンスです。しかし、Colabはインタラクティブな実行環境なので、処理するテキストをコードとして書いてしまっても構わないでしょう。 . テキストを１行ずつ処理する場合、１行が１要素となっているリストとして扱うのが便利です。以下のように書きます。 . user_list = [ &#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39; ] user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . 先述の方法は、各行をシングルクォートで囲み、カンマで区切る必要があるので、行数が増えると面倒です。その場合はヒアドキュメントとして記述し、行ごとに分割することもできます。 . user_list = &#39;&#39;&#39;TAGUCHI Tetsuya TAKATA Yoshinao IWAMOTO Yoshiya NONAKA Takeichi TSUKAMOTO Hisami &#39;&#39;&#39;.splitlines() user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . &#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12416; . 処理するテキストが他のシステムからファイルとして提供されている場合など、コードに埋め込むよりも直接ファイルを読み込んだ方が良い場合もあるので、併せて説明します。 . &#12469;&#12531;&#12503;&#12523;&#12501;&#12449;&#12452;&#12523;&#12434;&#29992;&#24847;&#12377;&#12427; . ファイルを読み込むコードを例示するためには、Colabのランタイム上に読み込むファイルを用意する必要があります。 . 以下のコードを実行すると、カレントディレクトリにuser.txtファイルが作成されます。 . %%writefile user.txt TAGUCHI Tetsuya TAKATA Yoshinao IWAMOTO Yoshiya NONAKA Takeichi TSUKAMOTO Hisami . Overwriting user.txt . Python&#12398;file object&#12434;&#20351;&#12387;&#12390;&#35501;&#12415;&#36796;&#12416; . 用意したサンプルファイルをPythonのopen関数にファイルパスを渡すことで、開きます。開いたファイルはfile objectとして扱われます。また、with文でラップしておくと、file bcjectはwith文ブロックを抜ける際に閉じられます。 . これはPythonでファイルを読み込むときの典型的な方法です。 . with open(&#39;user.txt&#39;) as f: lines = f.read() lines . &#39;TAGUCHI Tetsuya nTAKATA Yoshinao nIWAMOTO Yoshiya nNONAKA Takeichi nTSUKAMOTO Hisami&#39; . file objectのreadメソッドでファイルを読み込むと、ファイルの内容が1つの文字列になるので、splitlinesメソッドで行ごとに分割すると、あとで処理するときに便利です。 . user_list = lines.splitlines() user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . file objectのreadlinesメソッドで読み込むと、１行1要素のリストになりますが、末尾に改行文字を含みます。 . with open(&#39;user.txt&#39;) as f: user_list = f.readlines() user_list . [&#39;TAGUCHI Tetsuya n&#39;, &#39;TAKATA Yoshinao n&#39;, &#39;IWAMOTO Yoshiya n&#39;, &#39;NONAKA Takeichi n&#39;, &#39;TSUKAMOTO Hisami&#39;] . listにfile objectを与えても同様です。 . with open(&#39;user.txt&#39;) as f: user_list = list(f) user_list . [&#39;TAGUCHI Tetsuya n&#39;, &#39;TAKATA Yoshinao n&#39;, &#39;IWAMOTO Yoshiya n&#39;, &#39;NONAKA Takeichi n&#39;, &#39;TSUKAMOTO Hisami&#39;] . &#12510;&#12472;&#12483;&#12463;&#12467;&#12510;&#12531;&#12489;&#12434;&#20351;&#12387;&#12390;&#35501;&#12415;&#36796;&#12416; . %sxマジックの簡略化記法である!を使ってシステムコマンド(この場合はcat)を実行しその結果を変数に受け取る方法でも、ファイルを読み込むことができます。なお、%sxマジック(とその簡略化記法!)は、実行結果を改行文字で分割したリストとして返します。 . user_list = !cat user.txt user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . Colabでファイルを読み込む場合は、!からcatコマンドを実行する方が、file objectを使用するよりも簡単に書くことができます。 . GoogleDrive&#12395;&#12354;&#12427;&#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12416;&#26041;&#27861; . Colabでファイルを読み込む場合は、ファイルをGoogleDrive上に置き、ColabのランタイムにGoogleDriveをマウントすることで、読み込めるようにします。 . ColabのランタイムにGoogleDriveをマウントするには、以下のコードを実行し、表示されるウィンドウの指示に従って操作します。 . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . コードを実行すると、Colabランタイムの/content/driveにGoogleDriveがマウントされるので、あとは先述の方法でファイルを読み込むことができます。ファイルのパスは、次のように!を使ってlsなどのコマンドを実行し、探すのが良いでしょう。 . !ls /content/drive/ . MyDrive . CSV&#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12416;&#22580;&#21512; . CSVファイルを読み込む場合は、先述のfile objectを使って読み込む方法でもマジックコマンドを使って読み込む場合でも、csvモジュールを用いてパースを行うべきです。読み込んだ各行を,(カンマ)で分割してはいけません。以下にその理由を示します。 . &#12469;&#12531;&#12503;&#12523;&#12501;&#12449;&#12452;&#12523;&#12434;&#29992;&#24847;&#12377;&#12427; . サンプルコードを例示するためには、Colabのランタイム上に読み込むファイルを用意する必要があります。 . 次に、以下のコードを実行します。実行すると、カレントディレクトリにuser.csvファイルが作成されます。 . %%writefile user.csv family name,personal name &quot;TAGU,CHI&quot;,Tetsuya &quot;TA&quot;&quot;KATA&quot;,Yoshinao . Writing user.csv . 上のcsvファイルの内容は、Excelで作成したものです。 . 2行目の第１列には,(カンマ)が含まれています。この場合は、１列目の文字列が&quot;(ダブルクォート)で括られます。 また、３行目の第１列には&quot;が含まれています。この場合は、１列目の文字列が&quot;で括られた上で、エスケープ文字として&quot;が挿入されています。 . この２行目を,で分割すると次のようになります。 . with open(&#39;user.csv&#39;) as f: lines = f.read().splitlines() lines[1].split(&#39;,&#39;) . [&#39;&#34;TAGU&#39;, &#39;CHI&#34;&#39;, &#39;Tetsuya&#39;] . このように、読み込んだ各行を単純に,で分割することはできないのです。 . file object&#12391;&#35501;&#12415;&#36796;&#12435;&#12391;csv&#12514;&#12472;&#12517;&#12540;&#12523;&#12391;&#12497;&#12540;&#12473;&#12377;&#12427; . 以下にfile bojectを使ってファイルを読み込み、csvモジュールでパースするコードを例示します。csvファイルの1行目に列名が記載されている場合、DictReaderを使うと列名をKeyとするdictにパースされます。 . import csv with open(&#39;user.csv&#39;, newline=&#39;&#39;) as csvfile: user_list = list(csv.DictReader(csvfile)) user_list . [OrderedDict([(&#39;family name&#39;, &#39;TAGU,CHI&#39;), (&#39;personal name&#39;, &#39;Tetsuya&#39;)]), OrderedDict([(&#39;family name&#39;, &#39;TA&#34;KATA&#39;), (&#39;personal name&#39;, &#39;Yoshinao&#39;)])] . DictReaderを使ってdictにパースにしたので、次のコードのように、csvファイルの列名で要素にアクセスできます。 . import pandas pandas.DataFrame(user_list) . family name personal name . 0 TAGU,CHI | Tetsuya | . 1 TA&quot;KATA | Yoshinao | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; print(user_list[0][&#39;family name&#39;])print(user_list[0][&#39;personal name&#39;]) . TAGU,CHI Tetsuya . &#12510;&#12472;&#12483;&#12463;&#12467;&#12510;&#12531;&#12489;&#12434;&#20351;&#12387;&#12390;&#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12435;&#12391;csv&#12514;&#12472;&#12517;&#12540;&#12523;&#12391;&#12497;&#12540;&#12473;&#12377;&#12427; . !を使ってcatを実行しその結果を受けた変数をcsvモジュールでパースするコードを例示します。 . import csv l = !cat user.csv user_list = list(csv.DictReader(l)) user_list . [OrderedDict([(&#39;family name&#39;, &#39;TAGU,CHI&#39;), (&#39;personal name&#39;, &#39;Tetsuya&#39;)]), OrderedDict([(&#39;family name&#39;, &#39;TA&#34;KATA&#39;), (&#39;personal name&#39;, &#39;Yoshinao&#39;)])] . file objectを用いた例ではcsv.DictReaderの引数にfile objcectを渡していましたが、DictReaderはリストを受け取ることも可能なので、!でcatを実行した結果のリストを渡しています。 . &#12486;&#12461;&#12473;&#12488;&#12434;&#20986;&#21147;&#12377;&#12427;&#12356;&#12367;&#12388;&#12363;&#12398;&#26041;&#27861; . Colabでテキストを処理したら、その結果を出力しなければなりません。このセクションでは、そのいくつかの方法について説明します。 . &#12450;&#12454;&#12488;&#12503;&#12483;&#12488;&#12475;&#12523;&#12395;&#20986;&#21147;&#12377;&#12427; . 最も単純な方法は、コードセルのアウトプットに書き出し、それをマウスで選択してコピーする方法でしょう。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] for user in user_list: print(user) . useradd taguchi useradd tanaka useradd iwamoto useradd nonaka useradd tsukamoto . Python&#12398;file object&#12434;&#20351;&#12387;&#12390;&#12501;&#12449;&#12452;&#12523;&#12395;&#26360;&#12365;&#20986;&#12377; . ファイルを書き出すときには、ファイルを読み込むときと同じように、open関数を使います。ただし、mode引数によってファイルを開く際のモードを指定しなければなりません。 mode引数を指定しなかった場合、mode引数のデフォルトはrでこれは、読み取りを表します。wは書き込みですが、ファイルが存在する場合現在の内容を全て捨てます、xも書き込みですが、ファイルが存在する場合は失敗します。aも同じく書き込みですが、ファイルが存在する場合は末尾に追記します。 . with文でラップしておくと、file bcjectはwith文ブロックを抜ける際に閉じられます。ファイルを書き込む際にfile objectを閉じ忘れた場合、ファイルがディスクに書き込まれないことがあるので、with文でラップしておくのが安全です。with文でラップできない場合はfile objectのclose()メソッドを忘れずに実行します。 . これはPythonでファイルを読み込むときの典型的な方法です。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: for user in user_list: f.write(user) . writeメソッドは受け取った文字列をそのままファイルに書き込みます。そのため、書き込んだファイルは次のようになります。 . !cat add_user.txt . useradd taguchiuseradd tanakauseradd iwamotouseradd nonakauseradd tsukamoto . このため、改行が必要な場合は改行コードも書き出す必要があります。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: for user in user_list: f.write(user) f.write(&quot; n&quot;) !cat add_user.txt . useradd taguchi useradd tanaka useradd iwamoto useradd nonaka useradd tsukamoto . また、writelinesメソッドにリストを渡すことで、リストをまとめて書き出すことができます。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: f.writelines(user_list) . この場合も、改行コードは追加されません。 . !cat add_user.txt . useradd taguchiuseradd tanakauseradd iwamotouseradd nonakauseradd tsukamoto . このため、リスト内の文字列に改行コードを含ませておく必要があります。 . user_list = [ &#39;useradd taguchi n&#39;, &#39;useradd tanaka n&#39;, &#39;useradd iwamoto n&#39;, &#39;useradd nonaka n&#39;, &#39;useradd tsukamoto n&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: f.writelines(user_list) !cat add_user.txt . useradd taguchi useradd tanaka useradd iwamoto useradd nonaka useradd tsukamoto . writefile&#12510;&#12472;&#12483;&#12463;&#12434;&#20351;&#12387;&#12390;&#12501;&#12449;&#12452;&#12523;&#12434;&#26360;&#12365;&#20986;&#12377;...&#12383;&#12384;&#12375;...... . %%writefileマジックコマンドを使うと、セルの内容をファイルへ書き出すことができます。ただし、このマジックコマンドはセルの内容をそのままファイルへ書き出すもので、変数を展開することができません。 . 変数str1を定義して . str1 = &#39;foo&#39; . %%writefileマジックでstr1.txtに書き出す . %%writefile str1.txt str1 . Overwriting str1.txt . そのファイルをcatすると . !cat str1.txt . str1 . 変数の内容ではなく、&quot;str1&quot;という文字列として出力されている。 . &#25991;&#23383;&#21015;&#22411;&#12398;&#22522;&#30990; . このセクションでは文字列型の基礎について説明します . &#25991;&#23383;&#21015;&#12398;&#35352;&#36848; . Pythonで文字列を記述するには、&#39;...&#39;シングルクォート、&quot;...&quot;ダブルクォート、または&#39;&#39;&#39;...&#39;&#39;&#39;トリプルクォート(3つのシングルクォート)で囲みます。&quot;&quot;&quot;...&quot;&quot;&quot;(3つのダブルクォート)で囲んだ場合は3つのシングルクォートで囲む場合と同じになります。 . &#39;&quot;ダブル&quot;クォートを埋め込むことができます&#39; . &#39;&#34;ダブル&#34;クォートを埋め込むことができます&#39; . &quot;&#39;シングル&#39;クォートを埋め込むことができます&quot; . &#34;&#39;シングル&#39;クォートを埋め込むことができます&#34; . &#39;&#39;&#39;改行を 埋め込むことができます。&#39;&#39;&#39; . &#39;改行を n埋め込むことができます。&#39; . 特殊文字は (バックスラッシュ)で始まり、シングルクォートで囲んだ場合でも特殊文字として扱われます。(シングルクォートで囲んだ場合は特殊文字として使わないプログラミング言語もありますが、Pythonは特殊文字として扱います。) . print(&#39;Hello nWorld!&#39;) . Hello World! . print(&quot;Hello nWorld!&quot;) . Hello World! . (バックスラッシュ)とそれに続く文字を特殊文字として解釈されたくない場合はクォートの前にrをつけてrwa stringsにします。 . print(r&quot;Hello nWorld!!&quot;) . Hello nWorld!! . Python3.6から導入されたf-stringを使うと、文字列に変数を指定することができます。 . クォートの前にfをつけるとf-stringになり、クォートに囲まれた文字列の中に{}で囲って変数を指定します。 . s = &#39;Hello&#39; f&#39;{s} World!&#39; . &#39;Hello World!&#39; . &#25991;&#23383;&#21015;&#12398;&#36899;&#32080; . 文字列は+演算子で連結することができます。 . s1 = &#39;Hello&#39; s2 = &#39;World!&#39; s3 = s1 + &#39; &#39; + s2 print(s3) . Hello World! . 先述のf-stringを応用して文字列を連結することもできます。 . s1 = &#39;Hello&#39; s2 = &#39;World!&#39; s3 = f&#39;{s1} {s2}&#39; print(s3) . Hello World! . また、文字列のjoinメソッドにリストを渡すと、リストの各要素を文字列で連結することができます。 . s1 = &#39;Hello&#39; s2 = &#39;World!&#39; s3 = &#39; | &#39;.join([s1, s2, s1, s2]) print(s3) . Hello | World! | Hello | World! . &#25991;&#23383;&#21015;&#12363;&#12425;&#12452;&#12531;&#12487;&#12483;&#12463;&#12473;&#12434;&#25351;&#23450;&#12375;&#12390;&#25991;&#23383;&#12434;&#21462;&#12426;&#20986;&#12377; . Pythonの文字列はindex(添字)を指定して、文字を取り出すことができます。最初の文字のインデックスは0です。 . サンプルコードで使用する文字列を変数sとして定義しておきます。 . s = r&#39;Hello World!&#39; print(s) . Hello World! . indexを指定すると、その位置の文字を取り出すことができます。 . for i in range(len(s)): print(f&#39;{i} : &#39;, s[i]) . 0 : H 1 : e 2 : l 3 : l 4 : o 5 : 6 : W 7 : o 8 : r 9 : l 10 : d 11 : ! . インデックスに負の数を指定すると文字列の後ろから数えて、その位置の文字を取り出します。 . for i in range(-1, -(len(s)) - 1, -1): print(f&#39;{i} : &#39;, s[i]) . -1 : ! -2 : d -3 : l -4 : r -5 : o -6 : W -7 : -8 : o -9 : l -10 : l -11 : e -12 : H . &#25991;&#23383;&#21015;&#12398;&#12473;&#12521;&#12452;&#12473; . Pythonの文字列はスライスをサポートしています。スライスを使うと文字列の一部分を取り出すことができます。 . サンプルコードで使用する文字列を変数sとして定義し、indexとその位置の文字を表示しておきます。 . s = r&#39;Hello World!&#39; for i in range(len(s)): print(f&#39;{i} ({-len(s)+i}): &#39;, s[i]) . 0 (-12): H 1 (-11): e 2 (-10): l 3 (-9): l 4 (-8): o 5 (-7): 6 (-6): W 7 (-5): o 8 (-4): r 9 (-3): l 10 (-2): d 11 (-1): ! . スライスは文字列[index:index]と記述し、1つ目に指定したindexの文字から、2つ目に指定したindexの1つ前の文字を取り出します。 . print(s[1:5]) . ello . 1つ目のindexを省略すると0と見做されます。 . print(s[:5]) . Hello . 2つ目のindexを省略すると文字列の末尾までを取得します。 . print(s[6:]) . World! . 2つ目のindexに1つ目のindexより小さな値を指定すると文字列を取り出せませんが、エラーにもならないので注意が必要です。 . print(s[5:1]) . . &#25991;&#23383;&#21015;&#12398;&#27604;&#36611; . ==&#12392;!= . 2つの文字列を比較する場合、同じ文字列であれば==演算子でTrueになり、異なる文字列であれば!=でTrueになります。 . &#39;Hello&#39; == &#39;Hello&#39; . True . &#39;Hello&#39; != &#39;World&#39; . True . 大文字と小文字は別の文字として扱われます。 . &#39;H&#39; == &#39;h&#39; . False . スライスと組み合わせることで、ある文字列の特定の位置から抜き出した文字列を別の文字列と比較することができます。 . s = r&#39;Hello World!&#39; print(s[:5]) print(s[:5] == &#39;Hello&#39;) . Hello True . startswith&#12392;endswith . 文字列がある文字列で始まるかを判定する場合はstartswith、ある文字列で終わるかを判定する場合はendswithメソッドを使うことができます。どちらのメソッドも間にsが入るので注意してください。(startwithではなくstartswith) . &#39;Hello World!&#39;.startswith(&#39;Hello&#39;) . True . &#39;Hello World!&#39;.endswith(&#39;World!&#39;) . True . in&#12392;not in . in演算子を使うと、ある文字列に別の文字列が含まれているかを判定することができます。含まれていないかを判定する場合はnot演算子を加えてnot inにします . &#39;Hello&#39; in &#39;Hello World!&#39; . True . &#39;Python&#39; not in &#39;Hello World!&#39; . True . &#25991;&#23383;&#21015;&#25805;&#20316; . &#25991;&#23383;&#21015;&#12434;&#20840;&#12390;&#22823;&#25991;&#23383;&#12395;&#22793;&#25563;&#12377;&#12427; . 文字列を全て大文字に変換するときは、upperメソッドを使います。 . s1 = &#39;Hello World!&#39; s2 = s1.upper() print(s2) . HELLO WORLD! . また、大文字小文字関係なく文字列を比較したい場合はupperメソッドを応用することで比較できます。 . print(&#39;HELLO&#39; == &#39;Hello&#39;.upper()) print(&#39;HELLO&#39; == &#39;HELLO&#39;.upper()) print(&#39;HELLO&#39; == &#39;hello&#39;.upper()) . True True . &#25991;&#23383;&#21015;&#12434;&#20840;&#12390;&#23567;&#25991;&#23383;&#12395;&#22793;&#25563;&#12377;&#12427; . 文字列を全て小文字に変換するときは、lowerメソッドを使います。 . s1 = &#39;Hello World!&#39; s2 = s1.lower() print(s2) . hello world! . upperメソッドの代わりにlowerメソッドを用いても、大文字小文字関係なく文字列を比較することができます。 . print(&#39;hello&#39; == &#39;Hello&#39;.lower()) print(&#39;hello&#39; == &#39;HELLO&#39;.lower()) print(&#39;hello&#39; == &#39;hello&#39;.lower()) . True True True . &#25991;&#23383;&#21015;&#12434;&#20998;&#21106;&#12377;&#12427; . 文字列を分割する場合はsplitメソッドを使用します。splitメソッドの引数に分割する文字列を与えると、その文字列で分割したリストを返します。 . s1 = &#39;My_Name_is_Python&#39; s1.split(&#39;_&#39;) . [&#39;My&#39;, &#39;Name&#39;, &#39;is&#39;, &#39;Python&#39;] . 引数を与えなかった場合はスペースで分割されます。 . s1 = &#39;My Name is Python&#39; s1.split() . [&#39;My&#39;, &#39;Name&#39;, &#39;is&#39;, &#39;Python&#39;] . &#25991;&#23383;&#21015;&#12363;&#12425;&#31354;&#30333;&#12434;&#21462;&#12426;&#38500;&#12367; . 文字列の両端から空白を取り除く場合はstripメソッド、先頭から取り除く場合はlstripメソッド、末尾から取り除く場合はrstripメソッドを使います。 . s1 = &#39; Hello World!! &#39; print(f&#39;|{s1}|&#39;) print(f&#39;|{s1.strip()}|&#39;) print(f&#39;|{s1.lstrip()}|&#39;) print(f&#39;|{s1.rstrip()}|&#39;) . | Hello World!! | |Hello World!!| |Hello World!! | | Hello World!!| . &#25991;&#23383;&#21015;&#12363;&#12425;&#29305;&#23450;&#12398;&#25991;&#23383;&#21015;&#12434;&#21462;&#12426;&#38500;&#12367; . 文字列の中から特定の文字列を取り除きたい場合は、splitメソッドを使って取り除きたい文字列で分割したリストを作り、それを&#39;&#39;(空文字)のjoinメソッドに与えることで実現できます。 . 文字列から、スペースを取り除きたい場合は以下のようにします。 . s1 = &#39;My Name is Python&#39; l = s1.split() print(l) s2 = &#39;&#39;.join(s1.split()) print(s2) . [&#39;My&#39;, &#39;Name&#39;, &#39;is&#39;, &#39;Python&#39;] MyNameisPython .",
            "url": "https://taka4ma.github.io/fastpages/python/2022/04/21/_04_22_Python_Text_Processing_Starting_with_Colab.html",
            "relUrl": "/python/2022/04/21/_04_22_Python_Text_Processing_Starting_with_Colab.html",
            "date": " • Apr 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "fastpagesを使ってgithub.ioでNotebookを簡単に公開する方法",
            "content": ". &#32972;&#26223; . Jupyter NotebookやGoogle ColaboratoryのNotebookファイルをGithub Pagesで公開する方法は、以下の2つが知られています。 . NotebookファイルをMarkdownファイルへエクスポートしてGithubリポジトリへPushする。(GitHub PagesにはリポジトリにPushされたMarkdownファイルにアクセスすると、HTMLとしてレンダリングする機能があるため。) | NotebookファイルをGitHub GistにPushし、リポジトリにはgistの埋め込みスクリプトを記述したMarkdownかHTMLをPushする。(GitHub GistにはNotebookファイルを埋め込みスクリプトで表示するとHTMLとしてレンダリングする機能があるため。) | しかし、最初の方法はNotebookを作成・更新するたびに手動でMarkdownにエクスポートしなければなりません。Jupyter Notebookには開いているNotebookファイルをMarkdownファイルにコンバートしてダウンロードする機能があるので、それを利用することができます。Google ColaboratoryにはMarkdownファイルにコンバートする機能がないため、別に用意する必要があります。いずれにしても、NotebookファイルとMarkdownファイルの両方を管理しなければならないため、管理が煩雑になってしまいます。 . また、2つ目の方法では公開するNotebookごとにgistを用意する必要があります。gistはそれ自体が1つのリポジトリなので、Notebookの数だけリポジトリを管理しなくてはならず、管理が煩雑になります。Google Colaboratoryには開いているNotebookファイルのコピーをGitHub Gistへ保存する機能がありますが、保存するたびに新しいgistとして保存されてしまうため、この機能を利用するならば、gistの埋め込みスクリプトを記述したファイルを都度更新しなくてはなりません。 . このように、現在知られている2つの方法は、どちらもファイルやリポジトリの管理に手間がかかってしまうため、より簡単な方法が必要でした。 . fastpages&#12392;&#12399; . fastai/fastpages: An easy to use blogging platform, with enhanced support for Jupyter Notebooks. にて公開されているソフトウェアです。使用するには公開されているリポジトリをCloneし、初期設定を行います。そしてそのリポジトリのmasterブランチへルールに従ってNotebookファイルをPushします。そうするとGithub Actionが実行されます。実行されたGithub Actionによりコンテナが起動し、リポジトリがコンテナ上にCloneされ、ファイルのコンバートが行われ、出来たファイルがリポジトリのgh-pagesブランチへPushされます。このリポジトリはgh-pagesブランチをGitHub Pagesのコンテンツとして公開するように設定されているので、コンバートされたファイルが公開されます。 . Initial settings . fastpagesのリポジトリ(https://github.com/fastai/fastpages) にブラウザでアクセスする. | Setup Instructionsに、Generate a copy of this repo by clicking on this link.と書かれているので、リンクをクリックする. | &quot;Create a new repository from fastpages&quot;というタイトルの、リポジトリ作成画面が表示されるので, ownerに任意のアカウントまたはOrganizationsを選択する. | Repository nameにGithubの自分のユーザー名以外の名前を設定する. | Public/PrivateはPublicを選ぶ。 | Include all branchesにチェックを入れない. (https://github.com/fastai/fastpages/issues/608) | Create repository from templateをクリックする. | | ブラウザに作成したリポジトリが表示される | fastpagesのテンプレートからリポジトリを作成すると、GitHub Actionsのワークフローが実行され、PRが作成されるので、リポジトリのActionsタブを開いて、ワークフローが実行されているか確認する. ワークフローが実行されていれば、All workflowsに実行されたワークフローが表示される. | もし、ワークフローが実行されていない場合は、リポジトリのSettings &gt; Actions &gt; General &gt; Actions permissionsで実行が許可されているか確認する. | . | Pull requestsタブを開いて, &quot;Inital Setup&quot; というPRを開く. | PRの&quot;Before you merge this PR&quot;セクションを順番に処理する &quot;Create an ssh key-pair. Open this utility. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys.&quot; ブラウザでOnline Generate SSH keys algorithm RSA,DSA,ECDSAを開く | SSH-Keygen Online AlgorithmでRSAを選択する. | RSA Key Sizeで4096を選択する | Passphraseは入力しない | Generate-SSH-Keysをクリックする. そうすると、SSH鍵が作成され、表示される | ssh鍵は、ローカルマシンで、ssh-keygenコマンドで作成してもよい. | . | &quot;Navigate to this link and click New repository secret. Copy and paste the Private Key into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY.&quot; リポジトリの, Settings &gt; Secrets &gt; Actions を開き、New repository secretをクリックする. | NameにSSH_DEPLOY_KEYと入力. | Valueに生成した秘密鍵をペーストする. この時、&quot;BEGIN RSA PRIVATE KEY&quot; から &quot;--END RSA PRIVATE KEY&quot;までを含むこと. | Add secretをクリックして、登録する. | | &quot;Navigate to this link and click the Add deploy key button. Paste your Public Key from step 1 into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click Add key to save the key.&quot; リポジトリの, Settings &gt; Deploy keysを開き、Add deploy keyをクリックする. | タイトルに、fastpages-keyなど、好きな名前を付けます。 | 作成した公開鍵をKeyにペーストする. | Allow write accessのチェックボックスにチェックをつける. | Add keyをクリックしてキーを保存する. | | | &quot;Inital Setup&quot;PRのMerge pull requestをクリックし、コミットメッセージを入力するか、またはデフォルトのまま、Confirm mergeをクリックする。 PRをマージすると、GitHub Actionsのワークフローが実行され、リポジトリの内容が変更される、最初のデプロイが行われる。 | . | リポジトリのCodeタブを開く。 | README.mdが変更され、fastpagesによってデプロイされるコンテンツのトップのURLが記述されているので、そのURLをリンクで開く URLは通常、 https://ユーザ名.github.io/リポジトリ名 | 404の場合は、デプロイがまだ終わっていないので、数分待ってからリロードする | . | markdown&#12501;&#12449;&#12452;&#12523;&#12434;&#25237;&#31295;&#12377;&#12427; . YYYY-MM-DD-*.mdの命名規則に従って、投稿するmarkdownファイルのファイル名を変更します。 | /_post ディレクトリへプッシュしてください。 | Notebook&#12501;&#12449;&#12452;&#12523;&#12434;&#25237;&#31295;&#12377;&#12427; . YYYY-MM-DD-*.mdの命名規則に従って、投稿するnotebookファイルのファイル名を変更します。 | /_notebooks ディレクトリへプッシュしてください。 |",
            "url": "https://taka4ma.github.io/fastpages/fastpages/2022/04/21/_03_06_How_to_easily_publish_a_Notebook_on_github_io_using_fastpages.html",
            "relUrl": "/fastpages/2022/04/21/_03_06_How_to_easily_publish_a_Notebook_on_github_io_using_fastpages.html",
            "date": " • Apr 21, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Ubuntu20.04LTSにJupyterHubをインストールする方法",
            "content": "&#32972;&#26223; . かつて、Ubuntu14.04LTSへJupyterNotebookをインストールする方法として、Ubuntu Serverへのjupyter notebookインストール手順 | taka4ma.github.io を公開しました。当時の(現在からすると古典的な)JupyterNotebookは複数のユーザーに対応していなかったため、ユーザーごとにOSとその上で動作するJupyterNotebook環境を用意する必要がありました。 . 現在では、複数のユーザにJupyterNotebookを提供するための機能として、JupyterHubが提供されているため、この記事ではそのディストリビューションの一つである The Littlest JupyterHub を用いて、Amazon EC2インスタンスのUbuntu20.04LTSにJupyterHubをインストールする手順を紹介します。 . &#21069;&#25552;&#26465;&#20214; . EC2インスタンスは作成済みのこと | セキュリティグループのインバウンドルールに以下を追加しておくこと | . Type Protocol Port Range . SSH | TCP | 22 | . HTTP | TCP | 80 | . HTTPS | TCP. | 443 | . なお、この手順は以下の環境で動作確認しています。 . リージョン: 東京 | AMI: Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-088da9557aae42f39 (64 ビット x86) | インスタンスタイプ: t2.micro | . &#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#25163;&#38918; . EC2&#12452;&#12531;&#12473;&#12479;&#12531;&#12473;&#12408;&#12398;ssh&#12450;&#12463;&#12475;&#12473; . EC2インスタンスにはsshでアクセスします。 . $ ssh -i &lt;ssh-key-path&gt; ubuntu@&lt;public-ip&gt; . &#12497;&#12483;&#12465;&#12540;&#12472;&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#12377;&#12427; . python3, python3-dev, git, curlをインストールする . $ sudo apt update $ sudo apt install -y python3 python3-dev git curl . Littlest JupyterHub&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#12377;&#12427; . 次のコマンドを実行して、Littlest jupyterHubをインストールします。 . このとき、&lt;admin-user-name&gt;をJupyterHubに作成する管理者のユーザ名に置換します。 . $ curl -L https://tljh.jupyter.org/bootstrap.py | sudo -E python3 - --admin &lt;admin-user-name&gt; . コマンドを実行すると10分程度でインストールが完了します。 . インストールが完了すると、&quot;Done!&quot;と表示されます。 . &#12502;&#12521;&#12454;&#12470;&#12391;JupyterHub&#12395;&#12450;&#12463;&#12475;&#12473;&#12377;&#12427; . ブラウザからhttp://&lt;public-ip&gt;にアクセスします。ネットワークが正しく設定され、インストールに成功していれば、以下のような、JupyterHubのログインページが表示されるはずです。 . . &#12525;&#12464;&#12452;&#12531;&#12377;&#12427; . Usernameに、Littlest jupyterHubをインストールした際に、--adminオプションで設定した管理者のユーザ名を入力します。 | Passwordには、管理者アカウントに設定するパスワードを入力します。 アカウントのパスワードは、初回ログイン時にユーザ自身が設定します。設定が行われるまでの間、アカウントはパスワードによる保護がない状態なので、注意しなければなりません。 | . | . ログインに成功すると、以下のようなWeb UIが表示されます。 . . なお、初回のログインに成功した時点で、OSにユーザが作成され、/homeにユーザのホームディレクトリが作成されます。 . // 以下はadminをjupyter-hubadminにした場合の例 . $ ls -l /home/ total 8 drwxr-x 5 jupyter-hubadmin jupyter-hubadmin 4096 Mar 29 15:09 jupyter-hubadmin drwxr-xr-x 5 ubuntu ubuntu 4096 Mar 29 14:45 ubuntu . また、jupyterhub上で作成したファイルは、ホームディレクトリに保存されます。 . . // 上に示した画像のようにTest.ipynbファイルを作成すると、下に示すようにホームディレクトリに保存される。 . $ sudo ls -l /home/jupyter-hubadmin/ total 4 -rw-r--r-- 1 jupyter-hubadmin jupyter-hubadmin 588 Mar 29 15:11 Test.ipynb . 以上で、JupyterHubのインストールは完了です。 . &#12497;&#12473;&#12527;&#12540;&#12489;&#12434;&#22793;&#26356;&#12377;&#12427;&#24517;&#35201;&#12364;&#12354;&#12427;&#22580;&#21512; . パスワードを変更する必要がある場合は、以下の操作を行います。 . ブラウザからJupyterhubへログインする | ログインした状態で &lt;server_ip&gt;/hub/auth/change-password にアクセスする | 次に示すパスワード変更画面が表示されるので、新しいパスワードを入力してChange Passwordをクリックする | . &#12518;&#12540;&#12470;&#12434;&#36861;&#21152;&#12377;&#12427; . 管理者ユーザ以外のユーザの追加は、JupyterHubのWeb UIから行います。 . JupyterHubの右上にあるControll Panelボタンをクリックして、コントロールパネルを表示します。 | コントロールパネルの左上にあるAdminリンクを開くと、管理画面が表示されます。 | 管理画面のAdd Usersボタンをクリックします | 表示されたAdd Usersアイアログに、追加するユーザのアカウント名を入力します このとき、1行につき1ユーザを入力でき、一度に複数のユーザを作成できます。 | adminにする場合はAdminチェックボックスにチェックを入れます。adminと一般ユーザは同時に作成できません。 | . | Add Usersボタンをクリックするとユーザーが追加されます。 | .",
            "url": "https://taka4ma.github.io/fastpages/jupyter/2022/03/29/How-to-install-JupyterHub-on-Ubuntu20.html",
            "relUrl": "/jupyter/2022/03/29/How-to-install-JupyterHub-on-Ubuntu20.html",
            "date": " • Mar 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://taka4ma.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://taka4ma.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://taka4ma.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://taka4ma.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}