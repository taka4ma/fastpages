{
  
    
        "post0": {
            "title": "GoogleLolaboratoryからboto3を使ってEC2にインスタンスを起動するサンプルnotebook",
            "content": "&#12371;&#12398;notebook&#12399;...... . Amazon Web Services (AWS)のPython向けSDKであるBotoをGoogleColaboratoryから使用するサンプルです。 . Botoの詳細は、 公式ドキュメント を参照してください。 . このNotebookを実行するには、Amazon web service(AWS)のアカウントが必要です。 AWSの利用にはクレジットカード等の登録が必要な場合があります。 . &#20316;&#26989;&#28310;&#20633; . AWS&#12450;&#12463;&#12475;&#12473;&#12461;&#12540;&#12398;&#20316;&#25104; . Botoを使用するには、事前にAWSのアクセスキーを用意する必要があります。 . アクセスキー管理方法は様々ありますが、AWS IAMのユーザー https://console.aws.amazon.com/iam/home?region=us-west-2#/users からNotebook用のユーザーを作成する方法があります。万が一アクセスキーが漏れた場合に備えて、権限を最小限に、いつでも無効化できるように設定する必要があります。 . &#12452;&#12531;&#12473;&#12488;&#12540;&#12523; . Boto公式ドキュメントの Installation を参考に、GoogleColaboratoryのラインタイム環境へ、boto3をインストールします。 . !pip install boto3 . Collecting boto3 Downloading https://files.pythonhosted.org/packages/3f/87/31810f044f2dd2101f2ecd85c5539bbddef4cff47df39eb0be895cc23af4/boto3-1.15.16-py2.py3-none-any.whl (129kB) |████████████████████████████████| 133kB 4.4MB/s Collecting botocore&lt;1.19.0,&gt;=1.18.16 Downloading https://files.pythonhosted.org/packages/2d/9e/afa41db0cd911869305bb783b9b021be67ea23c8b7b317caa46632dbf3cf/botocore-1.18.16-py2.py3-none-any.whl (6.7MB) |████████████████████████████████| 6.7MB 11.9MB/s Collecting s3transfer&lt;0.4.0,&gt;=0.3.0 Downloading https://files.pythonhosted.org/packages/69/79/e6afb3d8b0b4e96cefbdc690f741d7dd24547ff1f94240c997a26fa908d3/s3transfer-0.3.3-py2.py3-none-any.whl (69kB) |████████████████████████████████| 71kB 6.3MB/s Collecting jmespath&lt;1.0.0,&gt;=0.7.1 Downloading https://files.pythonhosted.org/packages/07/cb/5f001272b6faeb23c1c9e0acc04d48eaaf5c862c17709d20e3469c6e0139/jmespath-0.10.0-py2.py3-none-any.whl Requirement already satisfied: python-dateutil&lt;3.0.0,&gt;=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore&lt;1.19.0,&gt;=1.18.16-&gt;boto3) (2.8.1) Requirement already satisfied: urllib3&lt;1.26,&gt;=1.20; python_version != &#34;3.4&#34; in /usr/local/lib/python3.6/dist-packages (from botocore&lt;1.19.0,&gt;=1.18.16-&gt;boto3) (1.24.3) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil&lt;3.0.0,&gt;=2.1-&gt;botocore&lt;1.19.0,&gt;=1.18.16-&gt;boto3) (1.15.0) Installing collected packages: jmespath, botocore, s3transfer, boto3 Successfully installed boto3-1.15.16 botocore-1.18.16 jmespath-0.10.0 s3transfer-0.3.3 . &#12467;&#12531;&#12501;&#12451;&#12464;&#12524;&#12540;&#12471;&#12519;&#12531; . Botoを使用するためには、認証資格情報をセットアップする必要があります。 . Boto公式ドキュメントの Configuration には、AWSCLIを用いる方法と、~/.aws/credentialsに設定を記述する方法が記載されていますが、 Using environment variables によれば、環境変数に設定することも可能なので、このnotebookでは環境変数を設定することにします。 . なお、最低限設定すべき環境変数は、 Configuration の記述内容から、以下の3つと考えられます。 . AWS_ACCESS_KEY_ID | AWS_SECRET_ACCESS_KEY | AWS_DEFAULT_REGION | AWS_ACCESS_KEY_IDとAWS_SECRET_ACCESS_KEYには、AWSアクセスキーのアクセスキー IDとシークレットアクセスキーを設定します。 . AWS_DEFAULT_REGIONには使用するリージョンを設定します。このnotebookでは東京リージョン( ap-northeast-1 )を使用します。 . &#12450;&#12463;&#12475;&#12473;&#12461;&#12540;ID&#12434;&#35373;&#23450;&#12377;&#12427; . import os import getpass os.environ[&#39;AWS_ACCESS_KEY_ID&#39;] = getpass.getpass() . ·········· . &#12471;&#12540;&#12463;&#12524;&#12483;&#12488;&#12450;&#12463;&#12475;&#12473;&#12461;&#12540;&#12434;&#35373;&#23450;&#12377;&#12427; . os.environ[&#39;AWS_SECRET_ACCESS_KEY&#39;] = getpass.getpass() . ·········· . &#12487;&#12501;&#12457;&#12523;&#12488;&#12522;&#12540;&#12472;&#12519;&#12531;&#12434;&#35373;&#23450;&#12377;&#12427; . os.environ[&#39;AWS_DEFAULT_REGION&#39;] = &#39;ap-northeast-1&#39; . boto3&#12434;&#20351;&#29992;&#12375;&#12390;&#12415;&#12427; . 公式ドキュメントの Using Boto3 を参考に、Boto3を使ってみる . boto3をインポートし、使用するサービスとしてS3を指定する . import boto3 s3 = boto3.resource(&#39;s3&#39;) . S3の全てのバケット名を出力する . for bucket in s3.buckets.all(): print(bucket.name) . mybucket-202007211923 . Using Boto3では、ファイルをバケットへputしているが、その前に現在のバケット内のオブジェクトを確認しておく . Using Boto3に書かれていないS3リソースについては、Boto3ドキュメントの S3 を参照のこと . bucket = s3.Bucket(&#39;mybucket-202007211923&#39;) list(bucket.objects.all()) . [] . オブジェクトは何もないようだ . Using Boto3と同じように、バケットへファイルをputする。 . ただし、Colaboratory環境へ画像ファイルをアップロードするのが面倒なので、今回はテキストファイルをputすることにする . !touch foo.txt !ls -l . total 4 -rw-r--r-- 1 root root 0 Oct 13 14:07 foo.txt drwxr-xr-x 1 root root 4096 Oct 5 16:31 sample_data . with open(&#39;foo.txt&#39;, &#39;rb&#39;) as data: bucket.put_object(Key=&#39;foo.txt&#39;, Body=data) . ファイルがputできたか確認する . list(bucket.objects.all()) . [s3.ObjectSummary(bucket_name=&#39;mybucket-202007211923&#39;, key=&#39;foo.txt&#39;)] . putできたようだ . 以上 .",
            "url": "https://taka4ma.github.io/fastpages/jupyter/boto3/2022/04/22/_launching_an_ec2_instance_from_colab_using_boto3.html",
            "relUrl": "/jupyter/boto3/2022/04/22/_launching_an_ec2_instance_from_colab_using_boto3.html",
            "date": " • Apr 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "GoogleColaboratoryでPlantUMLを使ってUMLを作る",
            "content": ". PlantUML&#12398;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523; . &#29872;&#22659;&#12398;&#30906;&#35469; . OS&#12434;&#30906;&#35469;&#12377;&#12427; . インストールする前に、まずはGoogleColaboratoryのOSを確認しておきます。 . !cat /etc/os-release . NAME=&#34;Ubuntu&#34; VERSION=&#34;18.04.3 LTS (Bionic Beaver)&#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=&#34;Ubuntu 18.04.3 LTS&#34; VERSION_ID=&#34;18.04&#34; HOME_URL=&#34;https://www.ubuntu.com/&#34; SUPPORT_URL=&#34;https://help.ubuntu.com/&#34; BUG_REPORT_URL=&#34;https://bugs.launchpad.net/ubuntu/&#34; PRIVACY_POLICY_URL=&#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&#34; VERSION_CODENAME=bionic UBUNTU_CODENAME=bionic . コマンドの実行結果から、Ubuntu 18.04.3 LTSということがわかります。 . Java&#12364;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#12373;&#12428;&#12390;&#12356;&#12427;&#12363;&#30906;&#35469;&#12377;&#12427; . PlantUMLの実行にはJavaが必要なので、GoogleColaboratory環境にインストールされているか確認します。 . !which java . /usr/bin/java . どうやらインストールされているようです。ちなみにバージョンは、 . !java --version . openjdk 11.0.6 2020-01-14 OpenJDK Runtime Environment (build 11.0.6+10-post-Ubuntu-1ubuntu118.04.1) OpenJDK 64-Bit Server VM (build 11.0.6+10-post-Ubuntu-1ubuntu118.04.1, mixed mode, sharing) . OpenJDKの11.0.6のようです。 . PlantUML&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#12377;&#12427; . sourceforgeでホストされているplantumlのjarファイルを/usr/loca/binへインストールします . !curl -L -o /usr/local/bin/plantuml.jar http://sourceforge.net/projects/plantuml/files/plantuml.jar/download . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 178 100 178 0 0 1028 0 --:--:-- --:--:-- --:--:-- 1028 100 21190 100 21190 0 0 35854 0 --:--:-- --:--:-- --:--:-- 82773 100 313 100 313 0 0 332 0 --:--:-- --:--:-- --:--:-- 332 100 8358k 100 8358k 0 0 6187k 0 0:00:01 0:00:01 --:--:-- 100M . lsコマンドで確認しておきます . !ls -la /usr/local/bin/plant* . -rw-r--r-- 1 root root 8559351 Apr 30 13:25 /usr/local/bin/plantuml.jar . インストールできました。 . graphviz&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523; . シーケンス図・アクティビティ図以外のダイアグラムを作成する場合はGraphvizも必要なので、インストールしておきます。 . !sudo apt-get install -y graphviz . Reading package lists... Done Building dependency tree Reading state information... Done graphviz is already the newest version (2.40.1-2). 0 upgraded, 0 newly installed, 0 to remove and 25 not upgraded. . IPlantUML&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523; . GoogleColatobatoryにPlantUMLのセルマジックを追加し、インラインSVGとして生成できるように、IPlantUMLもインストールします . !sudo pip install iplantuml . Collecting iplantuml Downloading https://files.pythonhosted.org/packages/10/b9/4db9b9ce81184d1d67f82284ca6131258b32f3f69376ee88aab5f7ff60a4/IPlantUML-0.1.1.tar.gz Collecting plantweb Downloading https://files.pythonhosted.org/packages/d6/6f/9ab1a1c3e33aaa0c0931983578c09336b092c75dce777ea666d3032f756e/plantweb-1.2.1-py3-none-any.whl Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from plantweb-&gt;iplantuml) (1.12.0) Requirement already satisfied: docutils in /usr/local/lib/python3.6/dist-packages (from plantweb-&gt;iplantuml) (0.15.2) Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from plantweb-&gt;iplantuml) (2.21.0) Requirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;plantweb-&gt;iplantuml) (3.0.4) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;plantweb-&gt;iplantuml) (2020.4.5.1) Requirement already satisfied: urllib3&lt;1.25,&gt;=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;plantweb-&gt;iplantuml) (1.24.3) Requirement already satisfied: idna&lt;2.9,&gt;=2.5 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;plantweb-&gt;iplantuml) (2.8) Building wheels for collected packages: iplantuml Building wheel for iplantuml (setup.py) ... done Created wheel for iplantuml: filename=IPlantUML-0.1.1-py2.py3-none-any.whl size=4897 sha256=afc5be23c60bc3f2596072cd6ef33d2658197b2fcf0e08b9f8d81da62ca9582a Stored in directory: /root/.cache/pip/wheels/98/e3/22/5474b6852d1717733862688fe1d1470f749f1fe7ae0d508ce7 Successfully built iplantuml Installing collected packages: plantweb, iplantuml Successfully installed iplantuml-0.1.1 plantweb-1.2.1 . &#12480;&#12452;&#12450;&#12464;&#12521;&#12512;&#12434;notebook&#12398;&#12452;&#12531;&#12521;&#12452;&#12531;SVG&#12392;&#12375;&#12390;&#20316;&#25104;&#12377;&#12427; . 環境が整ったので、iplantumlを使って、notebookに埋め込まれた形のUMLを作成してみます。 . import iplantuml . %%plantuml @startuml Title シーケンス図 Alice -&gt; Bob: Authentication Request Bob --&gt; Alice: Authentication Response Alice -&gt; Bob: Another authentication Request Alice &lt;-- Bob: another authentication Response @enduml . シーケンス図AliceAliceBobBobAuthentication RequestAuthentication ResponseAnother authentication Requestanother authentication Response できました。 . PlantUML言語リファレンスガイド に記載されている各ダイアグラムの文法に従えば、シーケンス図以外のダイアグラムも作成できます。 . &#12486;&#12461;&#12473;&#12488;&#12392;&#12480;&#12452;&#12450;&#12464;&#12521;&#12512;&#12434;&#12501;&#12449;&#12452;&#12523;&#12392;&#12375;&#12390;&#20316;&#25104;&#12377;&#12427; . PlantUMLのテキストや、そこから生成したダイアグラムをファイルとして保存したい場合には、以下のようにします。 . PantUML&#12398;&#12486;&#12461;&#12473;&#12488;&#12501;&#12449;&#12452;&#12523;&#12434;&#20316;&#25104;&#12377;&#12427; . wfitefileマジックコマンドを使って、PlantUMLのテキストを、plantuml.umlという名前で保存します。 . %%writefile plantuml.uml @startuml Title sequence diagram Alice -&gt; Bob: Authentication Request Bob --&gt; Alice: Authentication Response Alice -&gt; Bob: Another authentication Request Alice &lt;-- Bob: another authentication Response @enduml . Overwriting plantuml.uml . ファイルができているか確認します。 . !ls -l . total 16 -rw-r--r-- 1 root root 8171 Apr 30 13:51 plantuml.png -rw-r--r-- 1 root root 210 Apr 30 13:54 plantuml.uml drwxr-xr-x 1 root root 4096 Apr 3 16:24 sample_data . できていました。 . &#12486;&#12461;&#12473;&#12488;&#12501;&#12449;&#12452;&#12523;&#12363;&#12425;&#30011;&#20687;&#12434;&#29983;&#25104;&#12377;&#12427; . plantuml.jarを実行して、画像を生成します。 . !java -jar /usr/local/bin/plantuml.jar plantuml.uml . 正常終了するとアウトプットセルには何も出力されません。 . lsコマンドで画像ファイルができているか確認します。 . !ls -l . total 20 -rw-r--r-- 1 root root 9888 Apr 30 13:54 plantuml.png -rw-r--r-- 1 root root 210 Apr 30 13:54 plantuml.uml drwxr-xr-x 1 root root 4096 Apr 3 16:24 sample_data . できていました。 . notebookに読み込んで確認してみます。 . from IPython.display import Image Image(&quot;./plantuml.png&quot;) . 意図した通りの図になっています。 . GoogleDriveのフォルダをColaboratory環境にマウントすれば、ここで作成したファイルをGoogleDriveへ直接保存することができます。 .",
            "url": "https://taka4ma.github.io/fastpages/2022/04/22/_googlecolaboratory-plantuml-uml.html",
            "relUrl": "/2022/04/22/_googlecolaboratory-plantuml-uml.html",
            "date": " • Apr 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Cloud9でPython開発環境を作る",
            "content": "&#21021;&#12417;&#12395; . この記事は、LinuxのPython開発環境を簡単に用意する手段としてCloud9を利用する手順です。 . Cloud9&#12452;&#12531;&#12473;&#12479;&#12531;&#12473;&#12434;&#31435;&#12385;&#19978;&#12370;&#12427; . AWSマネジメントコンソール にログインします . | 使用するリージョンを選択します . | 検索窓にcloud9と入力し、AWS Cloud9コンソールを開きます . | [Create environment]を選択します . | . 環境の名前と説明の入力を求められるので、入力します。入力したら Next stepをクリックします。 | . 環境設定を求められるので、設定します。(この記事では全てデフォルトで進めます。) 選択し終わったら Next stepをクリックします。 . Environment Type : Create a new insntance for environment (direct access) | Instance type : t2.micro | Platform : Amazon Linux2(recommended) | Cost-saving setting : After 30 minutes(default) | . | . 設定のレビューが表示されるので、確認し、問題がなければ Create environmentをクリックします。 クリックするとEC2にCloud9のインスタンスが作成されます。ブラウザはCloud9に遷移し、環境が起動すると以下のようなウェルカム画面が表示されます。 | . Cloud9&#29872;&#22659;&#12434;&#30906;&#35469;&#12377;&#12427; . Cloud9が起動したら、環境の確認を行います。Cloud9はインスタンスをデプロイするタイミングにより使用されるイメージが異なるので、デプロイしたら確認したほうが良いでしょう。 . Cloud9のデフォルトでは、下部にターミナルウィンドウが表示されています。これはCloud9を実行しているEC2インスタンスに接続されています。この記事では、Cloud9のPlatformにAmazon Linux2を選択したので、ターミナルウィンドウからLinuxコマンドを入力して、Cloud9を実行しているインスタンスを操作することができます。 . この記事では、以降の操作はターミナルウィンドウから行います . . まずは、OSのバージョンなどを確認します。この記事の作成時点では以下のようになっていました。 . $ cat /proc/version Linux version 4.14.225-168.357.amzn2.x86_64 (mockbuild@ip-10-0-1-132) (gcc version 7.3.1 20180712 (Red Hat 7.3.1-12) (GCC)) #1 SMP Mon Mar 15 18:00:02 UTC 2021 $ uname -a Linux ip-172-31-1-107.ap-northeast-1.compute.internal 4.14.225-168.357.amzn2.x86_64 #1 SMP Mon Mar 15 18:00:02 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux $ cat /etc/system-release Amazon Linux release 2 (Karoo) $ cat /etc/os-release NAME=&quot;Amazon Linux&quot; VERSION=&quot;2&quot; ID=&quot;amzn&quot; ID_LIKE=&quot;centos rhel fedora&quot; VERSION_ID=&quot;2&quot; PRETTY_NAME=&quot;Amazon Linux 2&quot; ANSI_COLOR=&quot;0;33&quot; CPE_NAME=&quot;cpe:2.3:o:amazon:amazon_linux:2&quot; HOME_URL=&quot;https://amazonlinux.com/&quot; . Python&#12392;pip&#12398;&#12496;&#12540;&#12472;&#12519;&#12531;&#12434;&#30906;&#35469;&#12377;&#12427; . Pythonとpipバージョンも確認しておきます。同じく、記事作成時点では以下のようになっていました。 . $ python --version Python 3.7.9 $ sudo python --version Python 2.7.18 . sudo pythonではPython 2.7にパスが通っているので注意が必要です。(イメージによって異なる可能性があります。) . $ python -m pip --version pip 9.0.3 from /usr/lib/python3.7/site-packages (python 3.7) . pip&#12434;&#26356;&#26032;&#12377;&#12427; . 仮想環境を起動したら、pipを最新バージョンに更新します。 記事作成時点では、pipのバージョンは20.1.1でした。 . 以下のコマンドを実行して、更新します。 . $ pip3 install --upgrade pip --user Collecting pip Downloading https://files.pythonhosted.org/packages/fe/ef/60d7ba03b5c442309ef42e7d69959f73aacccd0d86008362a681c4698e83/pip-21.0.1-py3-none-any.whl (1.5MB) 100% |████████████████████████████████| 1.5MB 812kB/s Installing collected packages: pip Successfully installed pip-21.0.1 $ python -m pip --version pip 21.0.1 from /home/ec2-user/.local/lib/python3.7/site-packages/pip (python 3.7) . 実行した結果21.0.1になりました。 . Virtualenv&#12434;&#20316;&#25104;&#12375;&#36215;&#21205;&#12377;&#12427; . Python 3.3以降、標準機能であるvenvで仮想環境を作成することで、pipで導入するパッケージをプロジェクト毎に独立させることができます。 . Cloud9を利用する場合プロジェクト毎にインスタンスを分ければ仮想環境は必要ないように思えます。 しかしPythonがプリインストールされているLinux環境の場合、標準でないライブラリがインストールされている場合があります。 . この記事作成時点でのCloud9では以下のようになっていました。これから開発するソフトウェアが既にインストールされているライブラリの影響を受けないようにする為にvenvを使用します。 . $ python -m pip freeze astroid==2.3.0 backcall==0.2.0 botocore==1.20.37 decorator==4.4.2 Django==2.0.2 git-remote-codecommit==1.15.1 ikp3db==1.4.1 importlib-metadata==3.7.3 ipython==7.21.0 ipython-genutils==0.2.0 isort==4.3.21 jedi==0.18.0 jmespath==0.10.0 lazy-object-proxy==1.6.0 mccabe==0.6.1 parso==0.8.1 pbr==5.5.1 pexpect==4.8.0 pickleshare==0.7.5 prompt-toolkit==3.0.18 ptyprocess==0.7.0 Pygments==2.8.1 pylint==2.4.4 pylint-django==2.3.0 pylint-flask==0.6 pylint-plugin-utils==0.6 python-dateutil==2.8.1 pytz==2021.1 six==1.15.0 stevedore==3.3.0 traitlets==5.0.5 typed-ast==1.4.2 typing-extensions==3.7.4.3 urllib3==1.26.4 virtualenv==16.2.0 virtualenv-clone==0.5.4 virtualenvwrapper==4.8.4 wcwidth==0.2.5 wrapt==1.12.1 zipp==3.4.1 . ~/environmentディレクトリで、仮想環境を作成します。今回は myenv という名前にします。 . $ cd ~/environment $ python -mvenv myenv . 仮想環境を作成すると、カレントディレクトリに仮想環境名(今回はmyenv)のディレクトリが作成されます。) . $ ls -l total 4 drwxrwxr-x 5 ec2-user ec2-user 74 Mar 29 13:32 myenv -rw-r--r-- 1 ec2-user ec2-user 569 Mar 18 10:35 README.md . 仮想環境を作成したら、以下のコマンドで仮想環境を起動します。 . $ source myenv/bin/activete . venvを作成しactivateした直後にpip freezeすると、ライブラリが何もインストールされていないことがわかります。 . $ python -m pip freeze $ # &lt;- 何も表示されない . なお、仮想環境から抜ける場合は以下のコマンドを実行します。 . $ deactivate . 参考: venv 仮想環境の作成 — Python 3.9.2 ドキュメント .",
            "url": "https://taka4ma.github.io/fastpages/2022/04/22/_Creating_a_Python_development_environment_with_Cloud9.html",
            "relUrl": "/2022/04/22/_Creating_a_Python_development_environment_with_Cloud9.html",
            "date": " • Apr 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Colabで始めるPythonテキスト処理",
            "content": "&#21021;&#12417;&#12395; . このページを、taka4ma.github.io/fastpagesで見ている場合、タイトルの下に表示されている[Open in Colab]アイコンをクリックすると、Cloabで開くことができます。 . システム開発・運用の現場ではテキストを処理して別のテキストを作る仕事が多くあります。 . このNotebookでは、ColabでPythonを実行することによってテキスト処理を行う際の基礎的な情報を提供します。 . なお、Pythonにおけるフロー制御(if文、for文など)やデータ構造(リスト型、辞書型など)は説明しません。それらの情報は、python.orgのPython チュートリアル — Python 3.10.4 ドキュメントを参照することを推奨します。(リンク先は3.10.4のものですが、使用するPythonのバージョンに対応したものを参照してください。)また、正規表現も扱いません。このNotebookでは正規表現を使用せずに実現できる簡単なテキスト処理を扱います。 . Colab(Google Colaboratory)&#12392;&#12399; . Colaboratory へようこそ - Colaboratory　を参照してください。 . Jupyter Notebook&#12392;&#12398;&#38306;&#20418; . Colabは、Colabがホストする Jupyter Notebook(.ipynb)の実行環境です。 Colabで作成したNotebookをJupyterで実行したり、Jupyterで作成したNotebookをColabで実行したりできます。 . Jupyterプロジェクトについては、Project Jupyter | Homeを参照してください。 . Colab&#12398;&#20351;&#12356;&#26041; . Overview of Colaboratory Features - Colaboratory を参照してください。 . &#22793;&#25968;&#12434;&#30906;&#35469;&#12377;&#12427;&#24190;&#12388;&#12363;&#12398;&#26041;&#27861; . Colabはインタラクティブな実行環境なので、コードセルを実行するたびにその結果を確認しながら進めるのが確実です。このセクションでは変数の中身を確認するいくつかの方法を説明します。 . &#22793;&#25968;&#12434;&#20516;&#35413;&#20385;&#12377;&#12427; . 変数を評価すると、文字列に変換してコードセルのアウトプットに書き出されます。 . s = &#39;foo&#39; s . &#39;foo&#39; . ただし、この方法では、最後に評価した結果のみ出力されます。 . s1 = &#39;foo&#39; s2 = &#39;bar&#39; s1 s2 . &#39;bar&#39; . また、改行コードを含む文字列では改行コードを文字として出力します。 . s = &quot;foo nbar&quot; s . &#39;foo nbar&#39; . Noneである場合は出力されません。 . s = None s . listを評価すると次のように出力されます。 . l = [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] l . [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] . print&#38306;&#25968;&#12434;&#20351;&#12358; . print関数を使っても、コードセルのアウトプットに書き出すことができます。 . s = &#39;foo&#39; print(s) . foo . この方法では、print関数を実行するたびにアウトプットに書き出されます。 . s1 = &#39;foo&#39; s2 = &#39;bar&#39; print(s1) print(s2) . foo bar . また、改行コードを含む文字列では改行コードを改行として出力します。 . s = &quot;foo nbar&quot; print(s) . foo bar . また、Noneである場合はNoneという文字列として出力されます。 . s = None print(s) . None . listを書き出す場合、ただprint関数に与えると次のようになります。 . l = [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] print(l) . [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] . str.joinを利用すると次のように、１要素を１行として書き出すことができます。 . l = [&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;] print(&#39; n&#39;.join(l)) . abs() aiter() all() any() anext() ascii() . pandas.Dataframe&#12434;&#20351;&#12358; . listのインデックスも表示したいのであれば、enumerate関数を利用するのが典型的な方法ですが、 . for i, x in enumerate([&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;]): print(i,x) . 0 abs() 1 aiter() 2 all() 3 any() 4 anext() 5 ascii() . pandas.DataFrameを使って書き出すと簡単です。 . import pandas pandas.DataFrame([&#39;abs()&#39;, &#39;aiter()&#39;, &#39;all()&#39;, &#39;any()&#39;, &#39;anext()&#39;, &#39;ascii()&#39;]) . 0 . 0 abs() | . 1 aiter() | . 2 all() | . 3 any() | . 4 anext() | . 5 ascii() | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; listの要素に改行コードを含む場合、print関数を使用すると次にようになってしまいますが、 . for i, x in enumerate([&#39;ab ns()&#39;, &#39;ai nter()&#39;]): print(i,x) . 0 ab s() 1 ai ter() . pandas.DataFrameであれば改行コードを文字列として書き出します。 . import pandas pandas.DataFrame([&#39;ab ns()&#39;, &#39;ai nter()&#39;]) . 0 . 0 ab ns() | . 1 ai nter() | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; pandas.DataFrameは次のように、dictionaryを要素とするlistを表として書き出すことができます。 . import pandas pandas.DataFrame( [ {&#39;col1&#39;: &#39;row1-1&#39;, &#39;col2&#39;: &#39;row1-2&#39;}, {&#39;col1&#39;: &#39;row2-1&#39;, &#39;col2&#39;: &#39;row2-2&#39;}, ] ) . col1 col2 . 0 row1-1 | row1-2 | . 1 row2-1 | row2-2 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; &#12486;&#12461;&#12473;&#12488;&#12434;&#35501;&#12415;&#36796;&#12416;&#12356;&#12367;&#12388;&#12363;&#12398;&#26041;&#27861; . Colabでテキストを処理するためには、処理するテキストを読み込まなければなりません。このセクションでは、そのいくつかの方法について説明します。 . &#12486;&#12461;&#12473;&#12488;&#12434;&#12467;&#12540;&#12489;&#12395;&#22475;&#12417;&#36796;&#12416; . 通常のプログラムであれば、処理するテキストをコードに埋め込むのはナンセンスです。しかし、Colabはインタラクティブな実行環境なので、処理するテキストをコードとして書いてしまっても構わないでしょう。 . テキストを１行ずつ処理する場合、１行が１要素となっているリストとして扱うのが便利です。以下のように書きます。 . user_list = [ &#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39; ] user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . 先述の方法は、各行をシングルクォートで囲み、カンマで区切る必要があるので、行数が増えると面倒です。その場合はヒアドキュメントとして記述し、行ごとに分割することもできます。 . user_list = &#39;&#39;&#39;TAGUCHI Tetsuya TAKATA Yoshinao IWAMOTO Yoshiya NONAKA Takeichi TSUKAMOTO Hisami &#39;&#39;&#39;.splitlines() user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . &#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12416; . 処理するテキストが他のシステムからファイルとして提供されている場合など、コードに埋め込むよりも直接ファイルを読み込んだ方が良い場合もあるので、併せて説明します。 . &#12469;&#12531;&#12503;&#12523;&#12501;&#12449;&#12452;&#12523;&#12434;&#29992;&#24847;&#12377;&#12427; . ファイルを読み込むコードを例示するためには、Colabのランタイム上に読み込むファイルを用意する必要があります。 . 以下のコードを実行すると、カレントディレクトリにuser.txtファイルが作成されます。 . %%writefile user.txt TAGUCHI Tetsuya TAKATA Yoshinao IWAMOTO Yoshiya NONAKA Takeichi TSUKAMOTO Hisami . Overwriting user.txt . Python&#12398;file object&#12434;&#20351;&#12387;&#12390;&#35501;&#12415;&#36796;&#12416; . 用意したサンプルファイルをPythonのopen関数にファイルパスを渡すことで、開きます。開いたファイルはfile objectとして扱われます。また、with文でラップしておくと、file bcjectはwith文ブロックを抜ける際に閉じられます。 . これはPythonでファイルを読み込むときの典型的な方法です。 . with open(&#39;user.txt&#39;) as f: lines = f.read() lines . &#39;TAGUCHI Tetsuya nTAKATA Yoshinao nIWAMOTO Yoshiya nNONAKA Takeichi nTSUKAMOTO Hisami&#39; . file objectのreadメソッドでファイルを読み込むと、ファイルの内容が1つの文字列になるので、splitlinesメソッドで行ごとに分割すると、あとで処理するときに便利です。 . user_list = lines.splitlines() user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . file objectのreadlinesメソッドで読み込むと、１行1要素のリストになりますが、末尾に改行文字を含みます。 . with open(&#39;user.txt&#39;) as f: user_list = f.readlines() user_list . [&#39;TAGUCHI Tetsuya n&#39;, &#39;TAKATA Yoshinao n&#39;, &#39;IWAMOTO Yoshiya n&#39;, &#39;NONAKA Takeichi n&#39;, &#39;TSUKAMOTO Hisami&#39;] . listにfile objectを与えても同様です。 . with open(&#39;user.txt&#39;) as f: user_list = list(f) user_list . [&#39;TAGUCHI Tetsuya n&#39;, &#39;TAKATA Yoshinao n&#39;, &#39;IWAMOTO Yoshiya n&#39;, &#39;NONAKA Takeichi n&#39;, &#39;TSUKAMOTO Hisami&#39;] . &#12510;&#12472;&#12483;&#12463;&#12467;&#12510;&#12531;&#12489;&#12434;&#20351;&#12387;&#12390;&#35501;&#12415;&#36796;&#12416; . %sxマジックの簡略化記法である!を使ってシステムコマンド(この場合はcat)を実行しその結果を変数に受け取る方法でも、ファイルを読み込むことができます。なお、%sxマジック(とその簡略化記法!)は、実行結果を改行文字で分割したリストとして返します。 . user_list = !cat user.txt user_list . [&#39;TAGUCHI Tetsuya&#39;, &#39;TAKATA Yoshinao&#39;, &#39;IWAMOTO Yoshiya&#39;, &#39;NONAKA Takeichi&#39;, &#39;TSUKAMOTO Hisami&#39;] . Colabでファイルを読み込む場合は、!からcatコマンドを実行する方が、file objectを使用するよりも簡単に書くことができます。 . GoogleDrive&#12395;&#12354;&#12427;&#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12416;&#26041;&#27861; . Colabでファイルを読み込む場合は、ファイルをGoogleDrive上に置き、ColabのランタイムにGoogleDriveをマウントすることで、読み込めるようにします。 . ColabのランタイムにGoogleDriveをマウントするには、以下のコードを実行し、表示されるウィンドウの指示に従って操作します。 . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . コードを実行すると、Colabランタイムの/content/driveにGoogleDriveがマウントされるので、あとは先述の方法でファイルを読み込むことができます。ファイルのパスは、次のように!を使ってlsなどのコマンドを実行し、探すのが良いでしょう。 . !ls /content/drive/ . MyDrive . CSV&#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12416;&#22580;&#21512; . CSVファイルを読み込む場合は、先述のfile objectを使って読み込む方法でもマジックコマンドを使って読み込む場合でも、csvモジュールを用いてパースを行うべきです。読み込んだ各行を,(カンマ)で分割してはいけません。以下にその理由を示します。 . &#12469;&#12531;&#12503;&#12523;&#12501;&#12449;&#12452;&#12523;&#12434;&#29992;&#24847;&#12377;&#12427; . サンプルコードを例示するためには、Colabのランタイム上に読み込むファイルを用意する必要があります。 . 次に、以下のコードを実行します。実行すると、カレントディレクトリにuser.csvファイルが作成されます。 . %%writefile user.csv family name,personal name &quot;TAGU,CHI&quot;,Tetsuya &quot;TA&quot;&quot;KATA&quot;,Yoshinao . Writing user.csv . 上のcsvファイルの内容は、Excelで作成したものです。 . 2行目の第１列には,(カンマ)が含まれています。この場合は、１列目の文字列が&quot;(ダブルクォート)で括られます。 また、３行目の第１列には&quot;が含まれています。この場合は、１列目の文字列が&quot;で括られた上で、エスケープ文字として&quot;が挿入されています。 . この２行目を,で分割すると次のようになります。 . with open(&#39;user.csv&#39;) as f: lines = f.read().splitlines() lines[1].split(&#39;,&#39;) . [&#39;&#34;TAGU&#39;, &#39;CHI&#34;&#39;, &#39;Tetsuya&#39;] . このように、読み込んだ各行を単純に,で分割することはできないのです。 . file object&#12391;&#35501;&#12415;&#36796;&#12435;&#12391;csv&#12514;&#12472;&#12517;&#12540;&#12523;&#12391;&#12497;&#12540;&#12473;&#12377;&#12427; . 以下にfile bojectを使ってファイルを読み込み、csvモジュールでパースするコードを例示します。csvファイルの1行目に列名が記載されている場合、DictReaderを使うと列名をKeyとするdictにパースされます。 . import csv with open(&#39;user.csv&#39;, newline=&#39;&#39;) as csvfile: user_list = list(csv.DictReader(csvfile)) user_list . [OrderedDict([(&#39;family name&#39;, &#39;TAGU,CHI&#39;), (&#39;personal name&#39;, &#39;Tetsuya&#39;)]), OrderedDict([(&#39;family name&#39;, &#39;TA&#34;KATA&#39;), (&#39;personal name&#39;, &#39;Yoshinao&#39;)])] . DictReaderを使ってdictにパースにしたので、次のコードのように、csvファイルの列名で要素にアクセスできます。 . import pandas pandas.DataFrame(user_list) . family name personal name . 0 TAGU,CHI | Tetsuya | . 1 TA&quot;KATA | Yoshinao | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; print(user_list[0][&#39;family name&#39;])print(user_list[0][&#39;personal name&#39;]) . TAGU,CHI Tetsuya . &#12510;&#12472;&#12483;&#12463;&#12467;&#12510;&#12531;&#12489;&#12434;&#20351;&#12387;&#12390;&#12501;&#12449;&#12452;&#12523;&#12434;&#35501;&#12415;&#36796;&#12435;&#12391;csv&#12514;&#12472;&#12517;&#12540;&#12523;&#12391;&#12497;&#12540;&#12473;&#12377;&#12427; . !を使ってcatを実行しその結果を受けた変数をcsvモジュールでパースするコードを例示します。 . import csv l = !cat user.csv user_list = list(csv.DictReader(l)) user_list . [OrderedDict([(&#39;family name&#39;, &#39;TAGU,CHI&#39;), (&#39;personal name&#39;, &#39;Tetsuya&#39;)]), OrderedDict([(&#39;family name&#39;, &#39;TA&#34;KATA&#39;), (&#39;personal name&#39;, &#39;Yoshinao&#39;)])] . file objectを用いた例ではcsv.DictReaderの引数にfile objcectを渡していましたが、DictReaderはリストを受け取ることも可能なので、!でcatを実行した結果のリストを渡しています。 . &#12486;&#12461;&#12473;&#12488;&#12434;&#20986;&#21147;&#12377;&#12427;&#12356;&#12367;&#12388;&#12363;&#12398;&#26041;&#27861; . Colabでテキストを処理したら、その結果を出力しなければなりません。このセクションでは、そのいくつかの方法について説明します。 . &#12450;&#12454;&#12488;&#12503;&#12483;&#12488;&#12475;&#12523;&#12395;&#20986;&#21147;&#12377;&#12427; . 最も単純な方法は、コードセルのアウトプットに書き出し、それをマウスで選択してコピーする方法でしょう。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] for user in user_list: print(user) . useradd taguchi useradd tanaka useradd iwamoto useradd nonaka useradd tsukamoto . Python&#12398;file object&#12434;&#20351;&#12387;&#12390;&#12501;&#12449;&#12452;&#12523;&#12395;&#26360;&#12365;&#20986;&#12377; . ファイルを書き出すときには、ファイルを読み込むときと同じように、open関数を使います。ただし、mode引数によってファイルを開く際のモードを指定しなければなりません。 mode引数を指定しなかった場合、mode引数のデフォルトはrでこれは、読み取りを表します。wは書き込みですが、ファイルが存在する場合現在の内容を全て捨てます、xも書き込みですが、ファイルが存在する場合は失敗します。aも同じく書き込みですが、ファイルが存在する場合は末尾に追記します。 . with文でラップしておくと、file bcjectはwith文ブロックを抜ける際に閉じられます。ファイルを書き込む際にfile objectを閉じ忘れた場合、ファイルがディスクに書き込まれないことがあるので、with文でラップしておくのが安全です。with文でラップできない場合はfile objectのclose()メソッドを忘れずに実行します。 . これはPythonでファイルを読み込むときの典型的な方法です。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: for user in user_list: f.write(user) . writeメソッドは受け取った文字列をそのままファイルに書き込みます。そのため、書き込んだファイルは次のようになります。 . !cat add_user.txt . useradd taguchiuseradd tanakauseradd iwamotouseradd nonakauseradd tsukamoto . このため、改行が必要な場合は改行コードも書き出す必要があります。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: for user in user_list: f.write(user) f.write(&quot; n&quot;) !cat add_user.txt . useradd taguchi useradd tanaka useradd iwamoto useradd nonaka useradd tsukamoto . また、writelinesメソッドにリストを渡すことで、リストをまとめて書き出すことができます。 . user_list = [ &#39;useradd taguchi&#39;, &#39;useradd tanaka&#39;, &#39;useradd iwamoto&#39;, &#39;useradd nonaka&#39;, &#39;useradd tsukamoto&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: f.writelines(user_list) . この場合も、改行コードは追加されません。 . !cat add_user.txt . useradd taguchiuseradd tanakauseradd iwamotouseradd nonakauseradd tsukamoto . このため、リスト内の文字列に改行コードを含ませておく必要があります。 . user_list = [ &#39;useradd taguchi n&#39;, &#39;useradd tanaka n&#39;, &#39;useradd iwamoto n&#39;, &#39;useradd nonaka n&#39;, &#39;useradd tsukamoto n&#39; ] with open(&#39;add_user.txt&#39;, mode=&#39;w&#39;) as f: f.writelines(user_list) !cat add_user.txt . useradd taguchi useradd tanaka useradd iwamoto useradd nonaka useradd tsukamoto . writefile&#12510;&#12472;&#12483;&#12463;&#12434;&#20351;&#12387;&#12390;&#12501;&#12449;&#12452;&#12523;&#12434;&#26360;&#12365;&#20986;&#12377;...&#12383;&#12384;&#12375;...... . %%writefileマジックコマンドを使うと、セルの内容をファイルへ書き出すことができます。ただし、このマジックコマンドはセルの内容をそのままファイルへ書き出すもので、変数を展開することができません。 . 変数str1を定義して . str1 = &#39;foo&#39; . %%writefileマジックでstr1.txtに書き出す . %%writefile str1.txt str1 . Overwriting str1.txt . そのファイルをcatすると . !cat str1.txt . str1 . 変数の内容ではなく、&quot;str1&quot;という文字列として出力されている。 . &#25991;&#23383;&#21015;&#22411;&#12398;&#22522;&#30990; . このセクションでは文字列型の基礎について説明します . &#25991;&#23383;&#21015;&#12398;&#35352;&#36848; . Pythonで文字列を記述するには、&#39;...&#39;シングルクォート、&quot;...&quot;ダブルクォート、または&#39;&#39;&#39;...&#39;&#39;&#39;トリプルクォート(3つのシングルクォート)で囲みます。&quot;&quot;&quot;...&quot;&quot;&quot;(3つのダブルクォート)で囲んだ場合は3つのシングルクォートで囲む場合と同じになります。 . &#39;&quot;ダブル&quot;クォートを埋め込むことができます&#39; . &#39;&#34;ダブル&#34;クォートを埋め込むことができます&#39; . &quot;&#39;シングル&#39;クォートを埋め込むことができます&quot; . &#34;&#39;シングル&#39;クォートを埋め込むことができます&#34; . &#39;&#39;&#39;改行を 埋め込むことができます。&#39;&#39;&#39; . &#39;改行を n埋め込むことができます。&#39; . 特殊文字は (バックスラッシュ)で始まり、シングルクォートで囲んだ場合でも特殊文字として扱われます。(シングルクォートで囲んだ場合は特殊文字として使わないプログラミング言語もありますが、Pythonは特殊文字として扱います。) . print(&#39;Hello nWorld!&#39;) . Hello World! . print(&quot;Hello nWorld!&quot;) . Hello World! . (バックスラッシュ)とそれに続く文字を特殊文字として解釈されたくない場合はクォートの前にrをつけてrwa stringsにします。 . print(r&quot;Hello nWorld!!&quot;) . Hello nWorld!! . Python3.6から導入されたf-stringを使うと、文字列に変数を指定することができます。 . クォートの前にfをつけるとf-stringになり、クォートに囲まれた文字列の中に{}で囲って変数を指定します。 . s = &#39;Hello&#39; f&#39;{s} World!&#39; . &#39;Hello World!&#39; . &#25991;&#23383;&#21015;&#12398;&#36899;&#32080; . 文字列は+演算子で連結することができます。 . s1 = &#39;Hello&#39; s2 = &#39;World!&#39; s3 = s1 + &#39; &#39; + s2 print(s3) . Hello World! . 先述のf-stringを応用して文字列を連結することもできます。 . s1 = &#39;Hello&#39; s2 = &#39;World!&#39; s3 = f&#39;{s1} {s2}&#39; print(s3) . Hello World! . また、文字列のjoinメソッドにリストを渡すと、リストの各要素を文字列で連結することができます。 . s1 = &#39;Hello&#39; s2 = &#39;World!&#39; s3 = &#39; | &#39;.join([s1, s2, s1, s2]) print(s3) . Hello | World! | Hello | World! . &#25991;&#23383;&#21015;&#12363;&#12425;&#12452;&#12531;&#12487;&#12483;&#12463;&#12473;&#12434;&#25351;&#23450;&#12375;&#12390;&#25991;&#23383;&#12434;&#21462;&#12426;&#20986;&#12377; . Pythonの文字列はindex(添字)を指定して、文字を取り出すことができます。最初の文字のインデックスは0です。 . サンプルコードで使用する文字列を変数sとして定義しておきます。 . s = r&#39;Hello World!&#39; print(s) . Hello World! . indexを指定すると、その位置の文字を取り出すことができます。 . for i in range(len(s)): print(f&#39;{i} : &#39;, s[i]) . 0 : H 1 : e 2 : l 3 : l 4 : o 5 : 6 : W 7 : o 8 : r 9 : l 10 : d 11 : ! . インデックスに負の数を指定すると文字列の後ろから数えて、その位置の文字を取り出します。 . for i in range(-1, -(len(s)) - 1, -1): print(f&#39;{i} : &#39;, s[i]) . -1 : ! -2 : d -3 : l -4 : r -5 : o -6 : W -7 : -8 : o -9 : l -10 : l -11 : e -12 : H . &#25991;&#23383;&#21015;&#12398;&#12473;&#12521;&#12452;&#12473; . Pythonの文字列はスライスをサポートしています。スライスを使うと文字列の一部分を取り出すことができます。 . サンプルコードで使用する文字列を変数sとして定義し、indexとその位置の文字を表示しておきます。 . s = r&#39;Hello World!&#39; for i in range(len(s)): print(f&#39;{i} ({-len(s)+i}): &#39;, s[i]) . 0 (-12): H 1 (-11): e 2 (-10): l 3 (-9): l 4 (-8): o 5 (-7): 6 (-6): W 7 (-5): o 8 (-4): r 9 (-3): l 10 (-2): d 11 (-1): ! . スライスは文字列[index:index]と記述し、1つ目に指定したindexの文字から、2つ目に指定したindexの1つ前の文字を取り出します。 . print(s[1:5]) . ello . 1つ目のindexを省略すると0と見做されます。 . print(s[:5]) . Hello . 2つ目のindexを省略すると文字列の末尾までを取得します。 . print(s[6:]) . World! . 2つ目のindexに1つ目のindexより小さな値を指定すると文字列を取り出せませんが、エラーにもならないので注意が必要です。 . print(s[5:1]) . . &#25991;&#23383;&#21015;&#12398;&#27604;&#36611; . ==&#12392;!= . 2つの文字列を比較する場合、同じ文字列であれば==演算子でTrueになり、異なる文字列であれば!=でTrueになります。 . &#39;Hello&#39; == &#39;Hello&#39; . True . &#39;Hello&#39; != &#39;World&#39; . True . 大文字と小文字は別の文字として扱われます。 . &#39;H&#39; == &#39;h&#39; . False . スライスと組み合わせることで、ある文字列の特定の位置から抜き出した文字列を別の文字列と比較することができます。 . s = r&#39;Hello World!&#39; print(s[:5]) print(s[:5] == &#39;Hello&#39;) . Hello True . startswith&#12392;endswith . 文字列がある文字列で始まるかを判定する場合はstartswith、ある文字列で終わるかを判定する場合はendswithメソッドを使うことができます。どちらのメソッドも間にsが入るので注意してください。(startwithではなくstartswith) . &#39;Hello World!&#39;.startswith(&#39;Hello&#39;) . True . &#39;Hello World!&#39;.endswith(&#39;World!&#39;) . True . in&#12392;not in . in演算子を使うと、ある文字列に別の文字列が含まれているかを判定することができます。含まれていないかを判定する場合はnot演算子を加えてnot inにします . &#39;Hello&#39; in &#39;Hello World!&#39; . True . &#39;Python&#39; not in &#39;Hello World!&#39; . True . &#25991;&#23383;&#21015;&#25805;&#20316; . &#25991;&#23383;&#21015;&#12434;&#20840;&#12390;&#22823;&#25991;&#23383;&#12395;&#22793;&#25563;&#12377;&#12427; . 文字列を全て大文字に変換するときは、upperメソッドを使います。 . s1 = &#39;Hello World!&#39; s2 = s1.upper() print(s2) . HELLO WORLD! . また、大文字小文字関係なく文字列を比較したい場合はupperメソッドを応用することで比較できます。 . print(&#39;HELLO&#39; == &#39;Hello&#39;.upper()) print(&#39;HELLO&#39; == &#39;HELLO&#39;.upper()) print(&#39;HELLO&#39; == &#39;hello&#39;.upper()) . True True . &#25991;&#23383;&#21015;&#12434;&#20840;&#12390;&#23567;&#25991;&#23383;&#12395;&#22793;&#25563;&#12377;&#12427; . 文字列を全て小文字に変換するときは、lowerメソッドを使います。 . s1 = &#39;Hello World!&#39; s2 = s1.lower() print(s2) . hello world! . upperメソッドの代わりにlowerメソッドを用いても、大文字小文字関係なく文字列を比較することができます。 . print(&#39;hello&#39; == &#39;Hello&#39;.lower()) print(&#39;hello&#39; == &#39;HELLO&#39;.lower()) print(&#39;hello&#39; == &#39;hello&#39;.lower()) . True True True . &#25991;&#23383;&#21015;&#12434;&#20998;&#21106;&#12377;&#12427; . 文字列を分割する場合はsplitメソッドを使用します。splitメソッドの引数に分割する文字列を与えると、その文字列で分割したリストを返します。 . s1 = &#39;My_Name_is_Python&#39; s1.split(&#39;_&#39;) . [&#39;My&#39;, &#39;Name&#39;, &#39;is&#39;, &#39;Python&#39;] . 引数を与えなかった場合はスペースで分割されます。 . s1 = &#39;My Name is Python&#39; s1.split() . [&#39;My&#39;, &#39;Name&#39;, &#39;is&#39;, &#39;Python&#39;] . &#25991;&#23383;&#21015;&#12363;&#12425;&#31354;&#30333;&#12434;&#21462;&#12426;&#38500;&#12367; . 文字列の両端から空白を取り除く場合はstripメソッド、先頭から取り除く場合はlstripメソッド、末尾から取り除く場合はrstripメソッドを使います。 . s1 = &#39; Hello World!! &#39; print(f&#39;|{s1}|&#39;) print(f&#39;|{s1.strip()}|&#39;) print(f&#39;|{s1.lstrip()}|&#39;) print(f&#39;|{s1.rstrip()}|&#39;) . | Hello World!! | |Hello World!!| |Hello World!! | | Hello World!!| . &#25991;&#23383;&#21015;&#12363;&#12425;&#29305;&#23450;&#12398;&#25991;&#23383;&#21015;&#12434;&#21462;&#12426;&#38500;&#12367; . 文字列の中から特定の文字列を取り除きたい場合は、splitメソッドを使って取り除きたい文字列で分割したリストを作り、それを&#39;&#39;(空文字)のjoinメソッドに与えることで実現できます。 . 文字列から、スペースを取り除きたい場合は以下のようにします。 . s1 = &#39;My Name is Python&#39; l = s1.split() print(l) s2 = &#39;&#39;.join(s1.split()) print(s2) . [&#39;My&#39;, &#39;Name&#39;, &#39;is&#39;, &#39;Python&#39;] MyNameisPython .",
            "url": "https://taka4ma.github.io/fastpages/jupyter/python/2022/04/22/_04_22_Python_Text_Processing_Starting_with_Colab.html",
            "relUrl": "/jupyter/python/2022/04/22/_04_22_Python_Text_Processing_Starting_with_Colab.html",
            "date": " • Apr 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "fastpagesを使ってgithub.ioでNotebookを簡単に公開する方法",
            "content": ". &#32972;&#26223; . Jupyter NotebookやGoogle ColaboratoryのNotebookファイルをGithub Pagesで公開する方法は、以下の2つが知られています。 . NotebookファイルをMarkdownファイルへエクスポートしてGithubリポジトリへPushする。(GitHub PagesにはリポジトリにPushされたMarkdownファイルにアクセスすると、HTMLとしてレンダリングする機能があるため。) | NotebookファイルをGitHub GistにPushし、リポジトリにはgistの埋め込みスクリプトを記述したMarkdownかHTMLをPushする。(GitHub GistにはNotebookファイルを埋め込みスクリプトで表示するとHTMLとしてレンダリングする機能があるため。) | しかし、最初の方法はNotebookを作成・更新するたびに手動でMarkdownにエクスポートしなければなりません。Jupyter Notebookには開いているNotebookファイルをMarkdownファイルにコンバートしてダウンロードする機能があるので、それを利用することができます。Google ColaboratoryにはMarkdownファイルにコンバートする機能がないため、別に用意する必要があります。いずれにしても、NotebookファイルとMarkdownファイルの両方を管理しなければならないため、管理が煩雑になってしまいます。 . また、2つ目の方法では公開するNotebookごとにgistを用意する必要があります。gistはそれ自体が1つのリポジトリなので、Notebookの数だけリポジトリを管理しなくてはならず、管理が煩雑になります。Google Colaboratoryには開いているNotebookファイルのコピーをGitHub Gistへ保存する機能がありますが、保存するたびに新しいgistとして保存されてしまうため、この機能を利用するならば、gistの埋め込みスクリプトを記述したファイルを都度更新しなくてはなりません。 . このように、現在知られている2つの方法は、どちらもファイルやリポジトリの管理に手間がかかってしまうため、より簡単な方法が必要でした。 . fastpages&#12392;&#12399; . fastai/fastpages: An easy to use blogging platform, with enhanced support for Jupyter Notebooks. にて公開されているソフトウェアです。使用するには公開されているリポジトリをCloneし、初期設定を行います。そしてそのリポジトリのmasterブランチへルールに従ってNotebookファイルをPushします。そうするとGithub Actionが実行されます。実行されたGithub Actionによりコンテナが起動し、リポジトリがコンテナ上にCloneされ、ファイルのコンバートが行われ、出来たファイルがリポジトリのgh-pagesブランチへPushされます。このリポジトリはgh-pagesブランチをGitHub Pagesのコンテンツとして公開するように設定されているので、コンバートされたファイルが公開されます。 . Initial settings . fastpagesのリポジトリ(https://github.com/fastai/fastpages) にブラウザでアクセスする. | Setup Instructionsに、Generate a copy of this repo by clicking on this link.と書かれているので、リンクをクリックする. | &quot;Create a new repository from fastpages&quot;というタイトルの、リポジトリ作成画面が表示されるので, ownerに任意のアカウントまたはOrganizationsを選択する. | Repository nameにGithubの自分のユーザー名以外の名前を設定する. | Public/PrivateはPublicを選ぶ。 | Include all branchesにチェックを入れない. (https://github.com/fastai/fastpages/issues/608) | Create repository from templateをクリックする. | | ブラウザに作成したリポジトリが表示される | fastpagesのテンプレートからリポジトリを作成すると、GitHub Actionsのワークフローが実行され、PRが作成されるので、リポジトリのActionsタブを開いて、ワークフローが実行されているか確認する. ワークフローが実行されていれば、All workflowsに実行されたワークフローが表示される. | もし、ワークフローが実行されていない場合は、リポジトリのSettings &gt; Actions &gt; General &gt; Actions permissionsで実行が許可されているか確認する. | . | Pull requestsタブを開いて, &quot;Inital Setup&quot; というPRを開く. | PRの&quot;Before you merge this PR&quot;セクションを順番に処理する &quot;Create an ssh key-pair. Open this utility. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys.&quot; ブラウザでOnline Generate SSH keys algorithm RSA,DSA,ECDSAを開く | SSH-Keygen Online AlgorithmでRSAを選択する. | RSA Key Sizeで4096を選択する | Passphraseは入力しない | Generate-SSH-Keysをクリックする. そうすると、SSH鍵が作成され、表示される | ssh鍵は、ローカルマシンで、ssh-keygenコマンドで作成してもよい. | . | &quot;Navigate to this link and click New repository secret. Copy and paste the Private Key into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY.&quot; リポジトリの, Settings &gt; Secrets &gt; Actions を開き、New repository secretをクリックする. | NameにSSH_DEPLOY_KEYと入力. | Valueに生成した秘密鍵をペーストする. この時、&quot;BEGIN RSA PRIVATE KEY&quot; から &quot;--END RSA PRIVATE KEY&quot;までを含むこと. | Add secretをクリックして、登録する. | | &quot;Navigate to this link and click the Add deploy key button. Paste your Public Key from step 1 into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click Add key to save the key.&quot; リポジトリの, Settings &gt; Deploy keysを開き、Add deploy keyをクリックする. | タイトルに、fastpages-keyなど、好きな名前を付けます。 | 作成した公開鍵をKeyにペーストする. | Allow write accessのチェックボックスにチェックをつける. | Add keyをクリックしてキーを保存する. | | | &quot;Inital Setup&quot;PRのMerge pull requestをクリックし、コミットメッセージを入力するか、またはデフォルトのまま、Confirm mergeをクリックする。 PRをマージすると、GitHub Actionsのワークフローが実行され、リポジトリの内容が変更される、最初のデプロイが行われる。 | . | リポジトリのCodeタブを開く。 | README.mdが変更され、fastpagesによってデプロイされるコンテンツのトップのURLが記述されているので、そのURLをリンクで開く URLは通常、 https://ユーザ名.github.io/リポジトリ名 | 404の場合は、デプロイがまだ終わっていないので、数分待ってからリロードする | . | markdown&#12501;&#12449;&#12452;&#12523;&#12434;&#25237;&#31295;&#12377;&#12427; . YYYY-MM-DD-*.mdの命名規則に従って、投稿するmarkdownファイルのファイル名を変更します。 | /_post ディレクトリへプッシュしてください。 | Notebook&#12501;&#12449;&#12452;&#12523;&#12434;&#25237;&#31295;&#12377;&#12427; . YYYY-MM-DD-*.mdの命名規則に従って、投稿するnotebookファイルのファイル名を変更します。 | /_notebooks ディレクトリへプッシュしてください。 |",
            "url": "https://taka4ma.github.io/fastpages/fastpages/2022/04/22/_03_06_How_to_easily_publish_a_Notebook_on_github_io_using_fastpages.html",
            "relUrl": "/fastpages/2022/04/22/_03_06_How_to_easily_publish_a_Notebook_on_github_io_using_fastpages.html",
            "date": " • Apr 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Ubuntu20.04LTSにJupyterHubをインストールする方法",
            "content": "&#32972;&#26223; . かつて、Ubuntu14.04LTSへJupyterNotebookをインストールする方法として、Ubuntu Serverへのjupyter notebookインストール手順 | taka4ma.github.io を公開しました。当時の(現在からすると古典的な)JupyterNotebookは複数のユーザーに対応していなかったため、ユーザーごとにOSとその上で動作するJupyterNotebook環境を用意する必要がありました。 . 現在では、複数のユーザにJupyterNotebookを提供するための機能として、JupyterHubが提供されているため、この記事ではそのディストリビューションの一つである The Littlest JupyterHub を用いて、Amazon EC2インスタンスのUbuntu20.04LTSにJupyterHubをインストールする手順を紹介します。 . &#21069;&#25552;&#26465;&#20214; . EC2インスタンスは作成済みのこと | セキュリティグループのインバウンドルールに以下を追加しておくこと | . Type Protocol Port Range . SSH | TCP | 22 | . HTTP | TCP | 80 | . HTTPS | TCP. | 443 | . なお、この手順は以下の環境で動作確認しています。 . リージョン: 東京 | AMI: Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-088da9557aae42f39 (64 ビット x86) | インスタンスタイプ: t2.micro | . &#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#25163;&#38918; . EC2&#12452;&#12531;&#12473;&#12479;&#12531;&#12473;&#12408;&#12398;ssh&#12450;&#12463;&#12475;&#12473; . EC2インスタンスにはsshでアクセスします。 . $ ssh -i &lt;ssh-key-path&gt; ubuntu@&lt;public-ip&gt; . &#12497;&#12483;&#12465;&#12540;&#12472;&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#12377;&#12427; . python3, python3-dev, git, curlをインストールする . $ sudo apt update $ sudo apt install -y python3 python3-dev git curl . Littlest JupyterHub&#12434;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523;&#12377;&#12427; . 次のコマンドを実行して、Littlest jupyterHubをインストールします。 . このとき、&lt;admin-user-name&gt;をJupyterHubに作成する管理者のユーザ名に置換します。 . $ curl -L https://tljh.jupyter.org/bootstrap.py | sudo -E python3 - --admin &lt;admin-user-name&gt; . コマンドを実行すると10分程度でインストールが完了します。 . インストールが完了すると、&quot;Done!&quot;と表示されます。 . &#12502;&#12521;&#12454;&#12470;&#12391;JupyterHub&#12395;&#12450;&#12463;&#12475;&#12473;&#12377;&#12427; . ブラウザからhttp://&lt;public-ip&gt;にアクセスします。ネットワークが正しく設定され、インストールに成功していれば、以下のような、JupyterHubのログインページが表示されるはずです。 . . &#12525;&#12464;&#12452;&#12531;&#12377;&#12427; . Usernameに、Littlest jupyterHubをインストールした際に、--adminオプションで設定した管理者のユーザ名を入力します。 | Passwordには、管理者アカウントに設定するパスワードを入力します。 アカウントのパスワードは、初回ログイン時にユーザ自身が設定します。設定が行われるまでの間、アカウントはパスワードによる保護がない状態なので、注意しなければなりません。 | . | . ログインに成功すると、以下のようなWeb UIが表示されます。 . . なお、初回のログインに成功した時点で、OSにユーザが作成され、/homeにユーザのホームディレクトリが作成されます。 . // 以下はadminをjupyter-hubadminにした場合の例 . $ ls -l /home/ total 8 drwxr-x 5 jupyter-hubadmin jupyter-hubadmin 4096 Mar 29 15:09 jupyter-hubadmin drwxr-xr-x 5 ubuntu ubuntu 4096 Mar 29 14:45 ubuntu . また、jupyterhub上で作成したファイルは、ホームディレクトリに保存されます。 . . // 上に示した画像のようにTest.ipynbファイルを作成すると、下に示すようにホームディレクトリに保存される。 . $ sudo ls -l /home/jupyter-hubadmin/ total 4 -rw-r--r-- 1 jupyter-hubadmin jupyter-hubadmin 588 Mar 29 15:11 Test.ipynb . 以上で、JupyterHubのインストールは完了です。 . &#12497;&#12473;&#12527;&#12540;&#12489;&#12434;&#22793;&#26356;&#12377;&#12427;&#24517;&#35201;&#12364;&#12354;&#12427;&#22580;&#21512; . パスワードを変更する必要がある場合は、以下の操作を行います。 . ブラウザからJupyterhubへログインする | ログインした状態で &lt;server_ip&gt;/hub/auth/change-password にアクセスする | 次に示すパスワード変更画面が表示されるので、新しいパスワードを入力してChange Passwordをクリックする | . &#12518;&#12540;&#12470;&#12434;&#36861;&#21152;&#12377;&#12427; . 管理者ユーザ以外のユーザの追加は、JupyterHubのWeb UIから行います。 . JupyterHubの右上にあるControll Panelボタンをクリックして、コントロールパネルを表示します。 | コントロールパネルの左上にあるAdminリンクを開くと、管理画面が表示されます。 | 管理画面のAdd Usersボタンをクリックします | 表示されたAdd Usersアイアログに、追加するユーザのアカウント名を入力します このとき、1行につき1ユーザを入力でき、一度に複数のユーザを作成できます。 | adminにする場合はAdminチェックボックスにチェックを入れます。adminと一般ユーザは同時に作成できません。 | . | Add Usersボタンをクリックするとユーザーが追加されます。 | .",
            "url": "https://taka4ma.github.io/fastpages/jupyter/2022/03/29/How-to-install-JupyterHub-on-Ubuntu20.html",
            "relUrl": "/jupyter/2022/03/29/How-to-install-JupyterHub-on-Ubuntu20.html",
            "date": " • Mar 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://taka4ma.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://taka4ma.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Dockerfile_for_kitchen Docker",
            "content": "kitchen-docker用Dockerfile . test-kitchenでkitchen-dockerを使う場合、.kitchen.ymlでテストインスタンスのベースイメージを設定する方法として、以下の3種類があります。 . 設定しない (内部ではKitchen::Driver::Docker.default_image()によって、platform.nameからname:TAGが作られる) . ~~~ 前略 ~~~ platforms: - name: centos-7.1 # &lt;= ここからcentos:centos7が生成される driver_config: privileged: true run_command: /sbin/init; sleep 3 ~~~ 後略 ~~~ . | name:TAGで設定 . ~~~ 前略 ~~~ platforms: - name: centos-7.1 driver_config: image: centos:centos7 # &lt;= コレ privileged: true run_command: /sbin/init; sleep 3 ~~~ 後略 ~~~ . | Dockerfileのパスを設定 (内部ではerbテンプレートとして扱われるので、eRubyタグでマークアップ可能。) . ~~~ 前略 ~~~ platforms: - name: centos-7.1 driver_config: dockerfile: test/platforms/centos-7.1/Dockerfile # &lt;= コレ privileged: true run_command: /sbin/init; sleep 3 ~~~ 後略 ~~~ . FROM centos:centos7 . | kitchen-dockerでは上記1. 2. の場合ベースイメージとして設定されたイメージをFROMとし、test-kitchenで使用する場合に必要となるパッケージや設定を加えたDockerfileを作ってdocker buildを行い、ビルドされたコンテナイメージをテスト環境として使用します。 しかし、3. の場合はパスで設定されたDockerfileをそのまま使ってdocker buildするので、Dockerfileに1. 2.の場合にビルドされる内容が含まれていないとテスト環境として使用できません。 . ということで、それに対応しているDockerfileが以下になります。 . &lt;%= from = &quot;FROM #{@image}&quot; platform = case @platform when &#39;debian&#39;, &#39;ubuntu&#39; disable_upstart = &lt;&lt;-eos RUN dpkg-divert --local --rename --add /sbin/initctl RUN ln -sf /bin/true /sbin/initctl eos packages = &lt;&lt;-eos ENV DEBIAN_FRONTEND noninteractive RUN apt-get update RUN apt-get install -y sudo openssh-server curl lsb-release eos @disable_upstart ? disable_upstart + packages : packages when &#39;rhel&#39;, &#39;centos&#39;, &#39;fedora&#39; &lt;&lt;-eos RUN yum clean all RUN yum install -y sudo openssh-server openssh-clients which curl RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#39;&#39; RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N &#39;&#39; eos when &#39;arch&#39; &lt;&lt;-eos RUN pacman -Syu --noconfirm RUN pacman -S --noconfirm openssh sudo curl RUN ssh-keygen -A -t rsa -f /etc/ssh/ssh_host_rsa_key RUN ssh-keygen -A -t dsa -f /etc/ssh/ssh_host_dsa_key eos when &#39;gentoo&#39; &lt;&lt;-eos RUN emerge sync RUN emerge net-misc/openssh app-admin/sudo RUN ssh-keygen -A -t rsa -f /etc/ssh/ssh_host_rsa_key RUN ssh-keygen -A -t dsa -f /etc/ssh/ssh_host_dsa_key eos when &#39;gentoo-paludis&#39; &lt;&lt;-eos RUN cave sync RUN cave resolve -zx net-misc/openssh app-admin/sudo RUN ssh-keygen -A -t rsa -f /etc/ssh/ssh_host_rsa_key RUN ssh-keygen -A -t dsa -f /etc/ssh/ssh_host_dsa_key eos else raise ActionFailed, &quot;Unknown platform &#39;#{@platform}&#39;&quot; end username = @username password = @password public_key = IO.read(@public_key).strip homedir = username == &#39;root&#39; ? &#39;/root&#39; : &quot;/home/#{username}&quot; base = &lt;&lt;-eos RUN if ! getent passwd #{username}; then useradd -d #{homedir} -m -s /bin/bash #{username}; fi RUN echo #{username}:#{password} | chpasswd RUN echo &#39;#{username} ALL=(ALL) NOPASSWD:ALL&#39; &gt;&gt; /etc/sudoers RUN mkdir -p /etc/sudoers.d RUN echo &#39;#{username} ALL=(ALL) NOPASSWD:ALL&#39; &gt;&gt; /etc/sudoers.d/#{username} RUN chmod 0440 /etc/sudoers.d/#{username} RUN mkdir -p #{homedir}/.ssh RUN chown -R #{username} #{homedir}/.ssh RUN chmod 0700 #{homedir}/.ssh RUN touch #{homedir}/.ssh/authorized_keys RUN chown #{username} #{homedir}/.ssh/authorized_keys RUN chmod 0600 #{homedir}/.ssh/authorized_keys eos custom = &#39;&#39; Array(@provision_command).each do |cmd| custom &lt;&lt; &quot;RUN #{cmd} n&quot; end ssh_key = &quot;RUN echo &#39;#{public_key}&#39; &gt;&gt; #{homedir}/.ssh/authorized_keys&quot; # Empty string to ensure the file ends with a newline. [from, platform, base, custom, ssh_key, &#39;&#39;].join(&quot; n&quot;) %&gt; . これをdriver_config.dockerfileに設定したパスへ保存し、個別のテスト環境に必要なDockerbuildを追記してあげれば使えるハズです。 . 実のところ、Kitchen::Driver::Docker.build_dockerfileをコピーしつつ若干手をいれて、erbテンプレートとして使えるようにしただけです。 .",
            "url": "https://taka4ma.github.io/fastpages/2015/10/02/Dockerfile_for_kitchen-docker.html",
            "relUrl": "/2015/10/02/Dockerfile_for_kitchen-docker.html",
            "date": " • Oct 2, 2015"
        }
        
    
  
    
        ,"post9": {
            "title": "Creating_an_ansibletdd_environment",
            "content": "AnsibleTDD環境をtest-kitchen, serverspec, Dockerで作る(2015年10月版) . これはtest-kitchen, serverspec, DockerをつかってAnsibleのテスト駆動開発を行う環境を構築する手順です。 Ubuntu14,CentOS7でApache2をインストールし、サービスを起動し、ブート時のサービス自動起動を設定するベストプラクティス構成1のAnsible playbookを例として取りあげます。 . この記事の目標 . AnsibleのTDD環境として、test-kitchenで次のことが出来る環境を作ります。 . Docker上にUbuntu14, CentOS7のコンテナを立ち上げ | 各コンテナをAnsibleでプロビジョニング | 各コンテナのプロビジョニング結果をServerspecで検証 | . 前提条件等 . この記事の前提条件は以下のとおりです。 . 作成するAnsible playbookの構成はベストプラクティスのディレクトリレイアウトに従う1　 | 作業環境は CentOS6.7(x86_64) | Rubyインストール済みのこと | bundlerインストール済みのこと | Dockerインストール済みのこと | . | . なお、この記事の検証に使用した環境は以下のとおりです。 . $ cat /etc/redhat-release CentOS release 6.7 (Final) $ arch x86_64 $ ruby -v ruby 2.1.5p273 (2014-11-13 revision 48405) [x86_64-linux] $ bundler -v Bundler version 1.9.2 $ docker -v Docker version 1.7.1, build 786b29d . (2015-12-04追記) 環境構築用のVagrantfileを作りました。 https://github.com/takasix/vagrant_kitchen_ansible . (元々別の用があって作ったものなので、バージョン指定が入っておらず、この記事の検証に使用した環境と全く同じ環境は構築されません。追記時点では記事の内容が全て動くことを確認済みです。) . 本文 . プロジェクト用ディレクトリの作成 . プロジェクト用のディレクトリを作成します。これ以降の手順はこのディレクトリをベースに行います。 . $ mkdir ~/ansibletdd $ cd ~/ansibletdd . test-kitchenインストール . プロジェクトディレクトリにGemfileを作成し、bundlerを使ってtest-kitchenをインストールします。 . source &#39;https://rubygems.org&#39; gem &#39;test-kitchen&#39; . 書けたらbundle installします。 . $ bundle install Fetching gem metadata from https://rubygems.org/.......... Fetching version metadata from https://rubygems.org/... Fetching dependency metadata from https://rubygems.org/.. Resolving dependencies... Using mixlib-shellout 2.2.1 Using net-ssh 2.9.2 Using net-scp 1.2.1 Using safe_yaml 1.0.4 Using thor 0.19.1 Using test-kitchen 1.4.2 Using bundler 1.9.2 Bundle complete! 1 Gemfile dependency, 7 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. . test-kitchen初期化 . kitchen initコマンドでtest-kitchenを初期化します。このとき–driver(または-D)オプションでドライバを、–provisioner(または-P)オプションでプロビジョナを指定できます。 今回は、テストを行う環境にDockerを使うのでドライバに”kitchen-docker”、プロビジョニングにはAnsibleを使うのでプロビジョナに”ansible_playbook”をそれぞれ指定します。 . $ bundle exec kitchen init --driver=kitchen-docker --provisioner=ansible_playbook create .kitchen.yml create chefignore create test/integration/default append Gemfile You must run `bundle install&#39; to fetch any new gems. . 初期化を行うと.kitchen.ymlファイルといくつかのディレクトリが作成されます。また、Gemfileが変更されます。 . $ cat .kitchen.yml driver: name: docker provisioner: name: ansible_playbook platforms: - name: ubuntu-14.04 - name: centos-7.1 suites: - name: default run_list: attributes: $ $ tree . ├── Gemfile ├── Gemfile.lock ├── chefignore └── test └── integration └── default $ $ cat Gemfile source &#39;https://rubygems.org&#39; gem &#39;test-kitchen&#39; gem &quot;kitchen-docker&quot; . kitchen-ansibleとServerspecインストール . kitchen initによって変更されたGemfileにkitchen-ansibleとserverspecを加え、bundlerを使ってインストールします。 . source &#39;https://rubygems.org&#39; gem &#39;test-kitchen&#39; gem &quot;kitchen-docker&quot; gem &#39;kitchen-ansible&#39; gem &#39;serverspec&#39; . 変更したら、もう一度bundle installします。 . $ bundle install Resolving dependencies... Using diff-lcs 1.2.5 Using multipart-post 2.0.0 Using faraday 0.9.2 Using highline 1.7.8 Using thor 0.19.1 Using librarian 0.1.2 Using librarian-ansible 1.0.6 Using mixlib-shellout 2.2.1 Using net-ssh 2.9.2 Using net-scp 1.2.1 Using safe_yaml 1.0.4 Using test-kitchen 1.4.2 Using kitchen-ansible 0.0.27 Using kitchen-docker 2.3.0 Using multi_json 1.11.2 Using net-telnet 0.1.1 Using rspec-support 3.3.0 Using rspec-core 3.3.2 Using rspec-expectations 3.3.1 Using rspec-mocks 3.3.2 Using rspec 3.3.0 Using rspec-its 1.2.0 Using sfl 2.2 Using specinfra 2.43.10 Using serverspec 2.24.1 Using bundler 1.9.2 Bundle complete! 4 Gemfile dependencies, 26 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. . .kitchen.ymlの設定 . kitchen initで作成された.kitchen.ymlを編集しtest-kitchenの設定を行います。 (編集が終わった.kitchen.ymlはこのセクションの一番最後にあります。) . driver: name: docker provisioner: name: ansible_playbook platforms: - name: ubuntu-14.04 - name: centos-7.1 suites: - name: default run_list: attributes: . driver . driverは、変更する必要はありません。 . driver: name: docker . provisioner . provisionerにはプロビジョナーのオプションを以下のように設定します。 なお、ansible_playbookのオプションはProvisioner Optionsも参照してください。 . provisioner: name: ansible_playbook playbook: site.yml roles_path: ./roles group_vars_path: ./group_vars host_vars_path: ./host_vars filter_plugins: ./filter_plugins additional_copy_path: - webservers.yml hosts: webservers require_ansible_omnibus: true require_ruby_for_busser: true . playbook master playbook(site.yml)を.kitchen.ymlからの相対パスで設定します。 . | roles_path, group_vars_path, host_vars_path, filter_plugins それぞれのディレクトリを.kitchen.ymlからの相対パスで設定します。 . | additional_copy_path 他にテスト環境へコピーするファイル・ディレクトリを.kitchen.ymlからの相対パスで設定します。この設定は配列なので複数の項目を設定できます。 . ベストプラクティス構成では、サーバー群(tier)ごとのPlay bookを作成し、site.ymlでサーバ群ごとのPlay bookをincludeすることで、site.ymlをインフラ全体の定義とします。2 しかし、kitchen-ansibleはplaybookに設定したymlをテスト環境へコピーしますが、その中でincludeしているymlまではコピーしてくれません。そこでサーバー群別Play bookもテスト環境へコピーされるようadditional_copy_pathに設定します。 (rolesディレクトリにあるrole別のPlay bookはroles_pathの設定によってコピーされます。) . 今回は、Apacheをインストールしたいので、サーバー群Play bookはwebservers.ymlという名前で作ることにして、とりあえずadditional_copy_pathに書いておきます。 . | hosts hostsオプションにはテスト環境がどのホストグループに含まれるホストかを定義します。 テスト環境にはhostsの設定を元に以下のようなinventryファイルが作成され、プロビジョニングに使用されます。 . localhost ansible_connection=local [webservers] # &lt;= ここにhostsオプションが設定される localhost . 今回は、ホストグループもwebserversという名前で作ることにして、とりあえずhostsに書いておきます。 . | require_ansible_omnibus trueにすると、テスト環境へのAnsibleインストールを、ansible_omnibus_urlオプション(デフォルトは　https://raw.githubusercontent.com/neillturner/omnibus-ansible/master/ansible_install.sh)で定義されたスクリプトで行います。 . (このオプションのデフォルトはfalseです。falseの場合、テスト環境へのAnsibleのインストールはyumまたはaptで行うのですが、記事執筆時点ではsyntax errorとなるため、オムニバスインストーラーを使用します。) . | require_ruby_for_busser trueの場合、テスト環境でbusserの実行に使用するrubyをインストールします。(busserはtest-kitchenのテストフレームワークです。) . このオプションのデフォルトはfalseで、その場合はChefをインストールし、それに同梱されているrubyでbusserを実行します。今回はAnsibleを使うためChefは不要、その上rubyよりもインストールに時間がかかるのでtrueにします。 . | platforms . platformsにはテスト環境を以下のように設定します。 . platforms: - name: ubuntu-14.04 - name: centos-7.1 driver_config: privileged: true run_command: /sbin/init; sleep 3 . 本記事執筆時点のcentos:centos7イメージでは、systemctlを使用するためには特権モードかつ起動コマンドを/sbin/initにしなければならない3ので、そのためのオプションを追加します。 . verifier . .kitchen.ymlにverifierを追加しテストツールのオプションを以下のように設定します。 . verifier: ruby_bindir: &#39;/usr/bin&#39; . verifierのruby_bindirにはテストツールの実行に使用するrubyがインストールされているディレクトリを設定します。 デフォルトは/opt/chef/embedded/binで、これはChefに同梱されるrubyのディレクトリを指しています。 今回はprovisioner設定でChefを入れず、代わりにrubyをインストールするため、ruby_bindirにはそちらのパスを設定します。 . suites . suitesにはテストスイートを以下のように設定します。 . suites: - name: default attributes: . run_listはkitchen-ansibleでは使用しないため消してしまいます。 attributesは今回は使用しませんが、extra_varsやtagsを設定する場合はここにぶら下げるので、残しておきます。 . 以上で、.kitchen.ymlの設定は終わりです。 最終的に.kitchen.ymlは以下のようになります。 . driver: name: docker provisioner: name: ansible_playbook playbook: site.yml roles_path: ./roles group_vars_path: ./group_vars host_vars_path: ./host_vars filter_plugins: ./filter_plugins additional_copy_path: - webservers.yml hosts: webservers require_ansible_omnibus: true require_ruby_for_busser: true platforms: - name: ubuntu-14.04 - name: centos-7.1 driver_config: privileged: true run_command: /sbin/init; sleep 3 verifier: ruby_bindir: &#39;/usr/bin&#39; suites: - name: default attributes: . .kitchen.ymlの編集が終わったら、kitchen listコマンドを叩くと以下のようにテスト環境が表示されるはずです。 . $ bundle exec kitchen list Instance Driver Provisioner Verifier Transport Last Action default-ubuntu-1404 Docker AnsiblePlaybook Busser Ssh &lt;Not Created&gt; default-centos-71 Docker AnsiblePlaybook Busser Ssh &lt;Not Created&gt; . テスト環境は[テストスイート名]-[プラットフォーム名]になり、platformとsuiteの組み合わせになります。 . Serverspecの初期化 . test-kitchenのルール4にしたがって、test/integration/defaultディレクトリへServerspecファイルを配置します。 (test/integration/defaultのdefaultの部分は.kitchen.ymlのsuitesのnameに対応します。テストスイートの名前を変更している場合はServerspecを配置するパスも変更しなければなりません。) . $ cd test/integration/default $ bundle exec serverspec-init Select OS type: 1) UN*X 2) Windows Select number: 1 Select a backend type: 1) SSH 2) Exec (local) Select number: 2 + spec/ + spec/localhost/ + spec/localhost/sample_spec.rb + spec/spec_helper.rb + Rakefile . Serverspecの初期化によって作成されたspecディレクトリをserverspecへリネームします。 これは、test-kitchenがテスト環境へインストールするテストランナー(busser)のプラグインをディレクトリ名から決めるためです。ディレクトリ名を変更しない場合busser-specという存在しないプラグインをインストールしようとしてエラーになります。) . $ mv spec/ serverspec/ . Serverspecの初期化を行うと、サンプルのspecファイルが作成されます。 中身は以下のとおりで、今回作成したいAnsible play bookにちょうど良いので名前だけ変更して中身はそのまま使います。 . mv test/integration/default/serverspec/localhost/sample_spec.rb test/integration/default/serverspec/localhost/webservers_spec.rb . require &#39;spec_helper&#39; describe package(&#39;httpd&#39;), :if =&gt; os[:family] == &#39;redhat&#39; do it { should be_installed } end describe package(&#39;apache2&#39;), :if =&gt; os[:family] == &#39;ubuntu&#39; do it { should be_installed } end describe service(&#39;httpd&#39;), :if =&gt; os[:family] == &#39;redhat&#39; do it { should be_enabled } it { should be_running } end describe service(&#39;apache2&#39;), :if =&gt; os[:family] == &#39;ubuntu&#39; do it { should be_enabled } it { should be_running } end describe service(&#39;org.apache.httpd&#39;), :if =&gt; os[:family] == &#39;darwin&#39; do it { should be_enabled } it { should be_running } end describe port(80) do it { should be_listening } end . リネームしたserverspecディレクトリにGemfileを追加します。 . source &#39;https://rubygems.org&#39; gem &#39;rake&#39; gem &#39;serverspec&#39; . 参考:Rake dependency missing for older rubies · Issue #28 . 仮のsite.yml作成 . 以上でTDDの準備が出来ました。と、言いたいところですが、この状態でkitchen testコマンドを叩くとエラーが発生します。 . $ cd ~/ansibletdd $ bundle exec kitchen test --&gt; Starting Kitchen (v1.4.2) --&gt; Cleaning up any prior instances of &lt;default-ubuntu-1404&gt; ~~~中略~~~ Preparing playbook &gt;&gt;&gt;&gt;&gt;&gt; Exception- &gt;&gt;&gt;&gt;&gt;&gt; Class: Kitchen::ActionFailed &gt;&gt;&gt;&gt;&gt;&gt; Message: Failed to complete #converge action: [unknown file type: site.yml] &gt;&gt;&gt;&gt;&gt;&gt; - &gt;&gt;&gt;&gt;&gt;&gt; Please see .kitchen/logs/kitchen.log for more details &gt;&gt;&gt;&gt;&gt;&gt; Also try running `kitchen diagnose --all` for configuration . とりあえずエラーを解消するため仮のsite.ymlとwebservers.ymlを作成します。 . - include: webservers.yml . - hosts: webservers tasks: . 作成したらもう一度kitchen testを行います。 . $ bundle exec kitchen test --&gt; Starting Kitchen (v1.4.2) --&gt; Cleaning up any prior instances of &lt;default-ubuntu-1404&gt; ~~~ 中略 ~~~ Finished in 0.27052 seconds (files took 0.46124 seconds to load) 4 examples, 4 failures Failed examples: rspec /tmp/verifier/suites/serverspec/localhost/webservers_spec.rb:8 # Package &quot;apache2&quot; should be installed rspec /tmp/verifier/suites/serverspec/localhost/webservers_spec.rb:17 # Service &quot;apache2&quot; should be enabled rspec /tmp/verifier/suites/serverspec/localhost/webservers_spec.rb:18 # Service &quot;apache2&quot; should be running rspec /tmp/verifier/suites/serverspec/localhost/webservers_spec.rb:27 # Port &quot;80&quot; should be listening ~~~ 後略 ~~~ . 今度は、default-ubuntu-1404でServerspecによる検証まで行われ、全てfailしました。 (test-kitchenはテストが失敗するとそのインスタンスでテストをやめてしまうので、それ以降のインスタンスでテストを行いたい場合は、bundle exec kitchen test default-centos-71のようにインスタンス名を指定します。インスタンス名は正規表現でも指定できるので、条件に合う複数のインスタンスをテストすることも出来ます。) . これでようやくTDDの準備が出来ました。 あとは、全てのテストが成功するよう、「書く -&gt; テスト」を繰り返しながらAnsible playbookを書いていけばOKです。 . Ansible playbookの実装 . TDD環境が出来たので、あとはPlay bookを実装していくだけです。 書き方の詳細は本記事の趣旨から外れるのでGoogle先生に聞いてもらうとして、とりあえず全てのテストが通るPlay bookを置いておきます。 . - include: webservers.yml . - hosts: webservers roles: - apache . - apt: pkg=apache2 when: &quot;ansible_os_family == &#39;Debian&#39;&quot; - yum: pkg=httpd when: &quot;ansible_os_family == &#39;RedHat&#39;&quot; - service: name=apache2 state=started enabled=yes when: &quot;ansible_os_family == &#39;Debian&#39;&quot; - service: name=httpd state=started enabled=yes when: &quot;ansible_os_family == &#39;RedHat&#39;&quot; . これで、kitchen testすれば全てのテストが成功するはずです。 . $ bundle exec kitchen test --&gt; Starting Kitchen (v1.4.2) --&gt; Cleaning up any prior instances of &lt;default-ubuntu-1404&gt; ~~~ 中略 ~~~ Package &quot;apache2&quot; should be installed Service &quot;apache2&quot; should be enabled should be running Port &quot;80&quot; should be listening Finished in 0.1665 seconds (files took 1.22 seconds to load) 4 examples, 0 failures Finished verifying &lt;default-ubuntu-1404&gt; (0m28.28s). ~~~ 中略 ~~~ Package &quot;httpd&quot; should be installed Service &quot;httpd&quot; should be enabled should be running Port &quot;80&quot; should be listening Finished in 0.16315 seconds (files took 1.07 seconds to load) 4 examples, 0 failures Finished verifying &lt;default-centos-71&gt; (0m24.25s). ~~~　後略 ~~~ . まとめ . AnsibleをTDDするための環境構築の一連の手順を追いかけました。 test-kitchenを使ってトライ&amp;エラーを簡単に行えるTDD環境を用意するとAnsible(やChef)の開発をサクサク進められる用になりますが、デフォルト設定では動かない箇所などハマりどころがいくつかあるので注意が必要です。ハマった場合はログと関連ドキュメントを読んで頑張りましょう。 . appendix . Docker imageを指定したい場合 . kitchen-docerはKitchen::Driver::Docker.default_imageによってplatform.nameからテスト環境のベースイメージのタグを生成しますが、任意のタグを指定することも出来ます。 その場合は、.kitchen.ymlを以下のように変更します。 . platforms: - name: ubuntu-14.04 driver_config: # &lt;= 追加 image: ubuntu:14.04 # &lt;= 追加 - name: centos-7 driver_config: image: centos:centos7 # &lt;= 追加 privileged: true run_command: /sbin/init; sleep 3 . 複数のホストグループに対応したい場合 . Play bookにホストグループ(例えば、apservers)を追加定義したい場合は、以下のようにします。 . テストスイートではprovisionerのオプションを上書きできるので、テストスイートを増やし、スイートごとにホストグループオプションを設定します。 . suites: - name: webservers # &lt;= defaultから変更 provisioner: # &lt;= 追加 hosts: webservers # &lt;= 追加 - name: apservers # &lt;= 追加 provisioner: # &lt;= 追加 hosts: apservers # &lt;= 追加 . 次にスイートごとのServerspecを用意します。 現在のtestディレクトリは以下のような状態です。 . $ tree test └── integration └── default ├── Rakefile └── serverspec ├── Gemfile ├── localhost │   └── webservers_spec.rb └── spec_helper.rb . このディレクトリに以下の操作を行います。 . defaultディレクトリはテストスイート名なのでこれはwebserversに変更します | Rakefile, Gemfile, spec_helper.rbは複数のテストスイートで共通なので、helpersディレクトリを作りそこへ移動します | webserversディレクトリをコピーしapserversディレクトリとします | コピーしたディレクトリのwebservers_spec.rbをapservers_spec.rbにリネームします。 | $ mv test/integration/default/ test/integration/webservers $ mkdir -p test/integration/helpers/serverspec $ cd test/integration $ mv webservers/Rakefile helpers/ $ mv webservers/serverspec/Gemfile helpers/serverspec/ $ mv webservers/serverspec/spec_helper.rb helpers/serverspec/ $ cp -r webservers/ apservers $ mv apservers/serverspec/localhost/webservers_spec.rb apservers/serverspec/localhost/apservers_spec.rb $ tree test test └── integration ├── apservers │   └── serverspec │   └── localhost │   └── apservers_spec.rb ├── helpers │   ├── Rakefile │   └── serverspec │   ├── Gemfile │   └── spec_helper.rb └── webservers └── serverspec └── localhost └── webservers_spec.rb . 以上で共通のファイルをhelpersへ移動し、各テストスイートに必要なファイル・ディレクトリを用意できました。あとはapservers_spec.rbファイルをapserversグループに適した形に書き換えれば完了です。 . 参考資料 . Ansibleのテストをtest-kitchenとServerspec、dockerで行う - Qiita | Chef &amp; Test Kitchen+Serverspec &amp; Docker &amp; PackerによるInfrastructure as Code事始め - Qiita | test-kitchenのつかいかた - Qiita | Introduction - KitchenCI | Kitchen — Chef Docs | Best Practices — Ansible Documentation | neillturner/kitchen-ansible | portertech/kitchen-docker | test-kitchen/busser | test-kitchen/busser-serverspec | . Best Practices — Ansible Documentation &#8617; &#8617;2 . | Best Practices — Ansible Documentation#top-level-playbooks-are-separated-by-role &#8617; . | Chef &amp; Test Kitchen+Serverspec &amp; Docker &amp; PackerによるInfrastructure as Code事始め - Qiita &#8617; . | Writing a Test - KitchenCI &#8617; . |",
            "url": "https://taka4ma.github.io/fastpages/2015/10/01/Creating_an_AnsibleTDD_environment.html",
            "relUrl": "/2015/10/01/Creating_an_AnsibleTDD_environment.html",
            "date": " • Oct 1, 2015"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://taka4ma.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://taka4ma.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}